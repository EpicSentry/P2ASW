class Blobulator::LightBucketImplementation::LightweightRenderer : public Blobulator::IBlobRenderer
{
    private void LightweightRenderer(class Blobulator::LightBucketImplementation::LightweightRenderer & );
    public void LightweightRenderer(class Blobulator::LightBucketImplementation::CFragmentedVertexBuffer & ,bool );
    public void ~LightweightRenderer();
    public void BeginFrame(bool ,void * );
    public void EndFrame();
    public void BeginTile(class Point3D & );
    public void DrawTile();
    public void EndTile();
    public void AddParticle(class ImpParticle & ,bool );
    public void SetCubeWidth(float );
    public float GetCubeWidth();
    public void SetRenderRadius(float );
    public float GetRenderRadius();
    public void SetCutoffRadius(float );
    public float GetCutoffRadius();
    public class Point3D & GetInnerDimensions();
    public float GetMarginWidth();
    public void SetPortalMatrices(struct matrix3x4_t * ,int );
    public void SetDebugMode(bool );
    public bool GetDebugMode();
    public int GetNumberOfDebugInfo();
    public void DrawDebugInfo(class IVDebugOverlay & ,int );
    public int GetDebugId();
    protected void RecalculateConstants();
    protected union __m128 m_f4WOnly;
    protected union __m128 m_f4Threshold;
    protected union __m128 m_f4Fourpt25s;
    protected union __m128 m_f4scalerSq;
    protected union __m128 m_f4cutoffRSq;
    protected class Point3D m_offset;
    protected class Point3D m_OuterDimensions;
    protected class Point3D m_InnerDimensions;
    protected bool m_bTileMode;
    protected bool m_bDebugMode;
    protected bool m_bDispatchToVertexBuffer;
    protected bool m_bConstantsCalculated;
    protected float m_fCutoffRadius;
    protected float m_fCubeWidth;
    protected float m_RenderRadius;
    protected float m_fCutoffRadiusSq;
    protected float m_fOneOverCubeWidth;
    protected float m_fScaler;
    protected float m_fScalerSq;
    protected float m_fOneOverThreshold;
    protected int m_nMarginNCubes;
    protected float m_fMarginWidth;
    protected int m_nFieldCalcSteps;
    protected float m_fThreshold;
    protected class Blobulator::LightBucketImplementation::CFragmentedVertexBuffer & m_FragmentedVertexBuffer;
    private class Blobulator::LightBucketImplementation::LightweightRenderer & operator=(class Blobulator::LightBucketImplementation::LightweightRenderer & );
    public void * __vecDelDtor(unsigned int );
};