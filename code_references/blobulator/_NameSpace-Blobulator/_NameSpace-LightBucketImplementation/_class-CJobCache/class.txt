class Blobulator::LightBucketImplementation::CJobCache
{
    public union __m128 m_f4Fourpt25s;
    public union __m128 m_f4scalerSq;
    public union __m128 m_f4cutoffRSq;
    public union __m128 m_f4Threshold;
    public class Point3D m_OuterBBMins;
    public class ImpParticle * m_pParticles;
    public int m_nNumberOfParticles;
    public float m_fCubeWidth;
    public float m_fThreshold;
    public unsigned int m_nCurrentCornerIndex;
    public class Blobulator::LightBucketImplementation::CCornerInfo * m_pAllCorners;
    public struct ThreadHandle_t__ * m_ThreadHandle;
    public bool m_bPolygonizationEnabled;
    public bool m_bTileMode;
    public int m_nMarginNCubes;
    public int m_nJobIndex;
    public int GetCacheIndex();
    public int m_nCurTime;
    public class Blobulator::LightBucketImplementation::CJobCache * m_pEaJobCache;
    public void * m_pLsOutputBuffers;
    public class Blobulator::LightBucketImplementation::CFragmentInfo m_EaFragment;
    public class Blobulator::LightBucketImplementation::CFragmentInfo m_LsFragment;
    public class Blobulator::LightBucketImplementation::CFragmentedVertexBuffer * m_pFragmentedVertexBuffer;
    public int m_nSlotIndexForFragmentVB;
    struct TransposedMatrix
    {
        union __m128 m_Translation;
        union __m128 m_ColumnX;
        union __m128 m_ColumnY;
        union __m128 m_ColumnZ;
    };
    public struct Blobulator::LightBucketImplementation::CJobCache::TransposedMatrix m_TransposedPortalMatrices[4];
    public struct Blobulator::LightBucketImplementation::CJobCache::TransposedMatrix m_TransposedInvertedPortalMatrices[4];
    public int m_nNumberOfMatrices;
    public class Blobulator::LightBucketImplementation::CFragmentInfo & GetCurrentFragmentInfo();
    public class Blobulator::LightBucketImplementation::CLockLessStack<128> m_FragmentsAvailable;
    public class Blobulator::LightBucketImplementation::CLockLessStack<128> m_FragmentsToDisplay;
    public class Blobulator::LightBucketImplementation::CFragmentInfo * m_pAllFragmentsInfos;
    public int m_nCurrentFragmentIndex;
    public int m_nMaxNumberOfVerticesDisplayed;
    public int m_nMaxNumberOfIndicesDisplayed;
    public void CJobCache(class Blobulator::LightBucketImplementation::CJobCache & );
    public void CJobCache();
    public void ~CJobCache();
    public void Initialize(class Blobulator::LightBucketImplementation::CLockLessStack<128> & ,class Blobulator::LightBucketImplementation::CLockLessStack<128> & ,class Blobulator::LightBucketImplementation::CFragmentInfo * );
    public void SetPortalMatrices(struct matrix3x4_t * ,int );
    public void ResetBetweenFrames(class Point3D & ,float ,float ,class ImpParticle * ,int ,int ,bool ,bool );
    public void BeginFrame();
    public void EndFrame();
    public void BeginTile();
    public void EndTile();
    public bool RenderSection(class Blobulator::LightBucketImplementation::CSection & );
    public const int NUM_CORNERS_GROUP_ALLOCATED;
    public const int NUM_CORNERINFOS_PER_CORNER_GROUP;
    public void SetupInternalCache();
    public void TeardownInternalCache();
    public bool GetAvailableFragment();
    public void PushCurrentFragmentToDraw();
    public bool SwapFragments();
    private class ImpParticle & GetParticle(int );
    private void Calculate(class Blobulator::LightBucketImplementation::CSection & ,class Blobulator::LightBucketImplementation::CCornerInfo * ,int ,int ,int );
    private void OptimizedCalcVertex2(union __m128 ,union __m128 ,class Blobulator::LightBucketImplementation::CCornerInfo * ,class Blobulator::LightBucketImplementation::CCornerInfo * ,float * );
    private class Blobulator::LightBucketImplementation::CCornerInfo * RetrieveCorner(class Blobulator::LightBucketImplementation::CSection & ,int ,int ,int ,int ,int );
    private class Blobulator::LightBucketImplementation::CCornerInfo * FindNewCornerInfo(class Blobulator::LightBucketImplementation::CSection & ,int ,int ,int ,int ,int );
    public class Blobulator::LightBucketImplementation::CJobCache & operator=(class Blobulator::LightBucketImplementation::CJobCache & );
    public void * __vecDelDtor(unsigned int );
};