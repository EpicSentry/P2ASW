class Blobulator::LightBucketImplementation::CSectionBlobRenderer : public Blobulator::LightBucketImplementation::LightweightRenderer
{
    private void CSectionBlobRenderer(class Blobulator::LightBucketImplementation::CSectionBlobRenderer & );
    public void CSectionBlobRenderer(class Blobulator::LightBucketImplementation::CFragmentedVertexBuffer & ,class Blobulator::LightBucketImplementation::CSectionPool & );
    public void ~CSectionBlobRenderer();
    public void BeginFrame(bool ,void * );
    public void EndFrame();
    public void BeginTile(class Point3D & );
    public void DrawTile();
    public void EndTile();
    public void SetPortalMatrices(struct matrix3x4_t * ,int );
    public void AddParticle(class ImpParticle & ,bool );
    private class Blobulator::LightBucketImplementation::CSectionBlobRenderer & operator=(class Blobulator::LightBucketImplementation::CSectionBlobRenderer & );
    private int m_nSlotIndexForFragmentVB;
    private int m_nMaxNoSlicesToDraw;
    private int m_nLastSliceDrawn;
    private bool m_bPolygonizationEnabled;
    private class Point3D m_OuterBBMins;
    private class Point3D m_OuterBBMaxs;
    private class Point3D m_InnerBBMins;
    private class Point3D m_InnerBBMaxs;
    private class ImpParticle m_Particles[256];
    private int m_nNumberOfParticles;
    private int m_nSectionIndices[2197];
    private class Blobulator::LightBucketImplementation::CSection * GetSection(unsigned int );
    private class Blobulator::LightBucketImplementation::CSection * GetSection(int ,int ,int );
    private unsigned int m_nStack[1024];
    private int m_nStackSize;
    private class SmartArray<Blobulator::LightBucketImplementation::CSection *,0,16> m_CacheSections;
    private int m_nCurrentCacheSection;
    private class Blobulator::LightBucketImplementation::CSectionPool & m_SectionPool;
    private class Blobulator::LightBucketImplementation::CThreadData * m_pThreadData;
    private int m_nNumberOfJobsToSpawn;
    private class Blobulator::LightBucketImplementation::CBlobJob ** m_ppJobs;
    private class Point3D m_mins;
    private const int NUM_CORNERS_GROUP_ALLOCATED;
    private const int NUM_CORNERINFOS_PER_CORNER_GROUP;
    private class Blobulator::LightBucketImplementation::CSection s_ZeroSection;
    private class Blobulator::LightBucketImplementation::CJobCache m_JobCaches[4];
    private class IThreadPool * s_pThreadPool;
    private int s_nCounterInstances;
    private class Blobulator::LightBucketImplementation::CLockLessStack<2197> m_SectionStacks[4];
    private class Blobulator::LightBucketImplementation::CLockLessStack<2197> m_GlobalSectionStack;
    private class Blobulator::LightBucketImplementation::CLockLessStackContainer<2197> * m_pSectionStackContainers[4];
    private class Blobulator::LightBucketImplementation::CLockLessStackContainer<2197> * m_pGlobalSectionStackContainer;
    private struct matrix3x4_t * m_pPortalMatrices;
    private int m_nNumberOfMatrices;
    private void RecalculateBoundingBoxes();
    private bool IsParticleWithinBounds(class ImpParticle & );
    private void SetMaxNoSlicesToDraw(int );
    private int GetMaxNoSlicesToDraw();
    private int GetLastSliceDrawn();
    private void SeedSurface();
    private bool SeedSurface(class Point3D & ,bool );
    private void StartRenderSlices();
    private void EndRenderSlices();
    private void RenderSlice(class Blobulator::LightBucketImplementation::CSection & );
    private bool CalcSign(class Blobulator::LightBucketImplementation::CSection & ,const float ,const float ,const float );
    private bool CalcSign(class Blobulator::LightBucketImplementation::CSection & ,const union __m128 ,const int ,const int ,const int );
    private bool CalcSign(class Blobulator::LightBucketImplementation::CSection & ,const union __m128 );
    private void CheckBucketAllocations(const int );
    private void FillSections(int ,int ,int ,int ,int ,int ,int );
    private void BuildCache();
    private void Calculate(class Blobulator::LightBucketImplementation::CBucket * );
    private void CalcVertex(const float ,const float ,const float ,const int ,class Blobulator::LightBucketImplementation::CCornerInfo * ,class Blobulator::LightBucketImplementation::CCornerInfo * );
    private bool ShouldRender();
    private void StartRenderPass();
    private void EndRenderPass();
    private void SortSections();
    public void * __vecDelDtor(unsigned int );
};