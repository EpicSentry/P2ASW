void __cdecl C_WeaponPortalgun::DoEffectHolding(C_WeaponPortalgun *const this)
{
  C_BaseViewModel *ViewModel; // esi
  C_BaseCombatCharacter *Owner; // eax
  C_BasePlayer *v3; // esi
  CNewParticleEffect *v4; // eax
  CNewParticleEffect *v5; // ecx
  CUtlReference<CNewParticleEffect> *p_m_hPortalGunEffectHoldingTP; // edx
  CUtlReference<CNewParticleEffect> *v7; // edi
  CUtlReference<CNewParticleEffect> *v8; // ecx
  CUtlReference<CNewParticleEffect> *v9; // ecx
  C_BaseCombatCharacter *v10; // eax
  C_BaseCombatCharacter *v11; // eax
  C_BaseCombatCharacter *v12; // eax
  C_BasePlayer_0 *v13; // edi
  C_BaseEntity *v14; // eax
  CParticleProperty *p_m_Particles; // edi
  CNewParticleEffect *v16; // eax
  CNewParticleEffect *m_pObject; // edx
  CUtlReference<CNewParticleEffect> *m_pPrev; // ecx
  CUtlReference<CNewParticleEffect> *m_pNext; // edx
  CUtlReference<CNewParticleEffect> *m_pHead; // edx
  C_BaseCombatCharacter *v21; // eax
  C_BaseCombatCharacter *v22; // eax
  C_BaseCombatCharacter *v23; // eax
  C_BasePlayer_0 *v24; // esi
  C_BaseEntity *PlayerHeldEntity; // eax
  CUtlReference<CNewParticleEffect> *v26; // edi
  CUtlReference<CNewParticleEffect> *v27; // ecx
  CUtlReference<CNewParticleEffect> *p_m_hPortalGunEffectHoldingFP; // [esp+3Ch] [ebp-9Ch]
  Vector v29; // [esp+6Ch] [ebp-6Ch]
  Vector v30; // [esp+78h] [ebp-60h]
  Vector vecOriginOffset; // [esp+A8h] [ebp-30h]
  Vector v32; // [esp+B4h] [ebp-24h]

  ViewModel = 0;
  if ( C_BaseCombatWeapon::GetOwner(this) )
  {
    Owner = C_BaseCombatWeapon::GetOwner(this);
    v3 = (C_BasePlayer *)Owner;
    if ( !Owner || !(*((unsigned __int8 (__cdecl **)(C_BaseCombatCharacter *))Owner->_vptr_IHandleEntity + 200))(Owner) )
      v3 = 0;
    ViewModel = C_BasePlayer::GetViewModel(v3, 0);
  }
  if ( !this->m_hPortalGunEffectHoldingFP.m_pObject && ViewModel )
  {
    p_m_Particles = &ViewModel->m_Particles;
    v16 = CParticleProperty::Create(
            &ViewModel->m_Particles,
            "portalgun_beam_holding_FP",
            PATTACH_POINT_FOLLOW,
            "muzzle");
    m_pObject = this->m_hPortalGunEffectHoldingFP.m_pObject;
    if ( v16 != m_pObject )
    {
      p_m_hPortalGunEffectHoldingFP = &this->m_hPortalGunEffectHoldingFP;
      if ( m_pObject )
      {
        m_pPrev = this->m_hPortalGunEffectHoldingFP.m_pPrev;
        if ( m_pPrev )
        {
          m_pPrev->m_pNext = this->m_hPortalGunEffectHoldingFP.m_pNext;
          m_pNext = this->m_hPortalGunEffectHoldingFP.m_pNext;
          if ( m_pNext )
            m_pNext->m_pPrev = this->m_hPortalGunEffectHoldingFP.m_pPrev;
        }
        else if ( p_m_hPortalGunEffectHoldingFP == m_pObject->m_References.m_pHead )
        {
          v27 = this->m_hPortalGunEffectHoldingFP.m_pNext;
          m_pObject->m_References.m_pHead = v27;
          if ( v27 )
            v27->m_pPrev = 0;
        }
        this->m_hPortalGunEffectHoldingFP.m_pPrev = 0;
        this->m_hPortalGunEffectHoldingFP.m_pNext = 0;
      }
      this->m_hPortalGunEffectHoldingFP.m_pObject = v16;
      if ( v16 )
      {
        this->m_hPortalGunEffectHoldingFP.m_pNext = v16->m_References.m_pHead;
        m_pHead = v16->m_References.m_pHead;
        if ( m_pHead )
          m_pHead->m_pPrev = p_m_hPortalGunEffectHoldingFP;
        this->m_hPortalGunEffectHoldingFP.m_pPrev = 0;
        v16->m_References.m_pHead = p_m_hPortalGunEffectHoldingFP;
      }
    }
    CParticleProperty::AddControlPoint(
      &ViewModel->m_Particles,
      this->m_hPortalGunEffectHoldingFP.m_pObject,
      1,
      ViewModel,
      PATTACH_POINT_FOLLOW,
      "Arm1_attach3",
      vec3_origin,
      0);
    CParticleProperty::AddControlPoint(
      &ViewModel->m_Particles,
      this->m_hPortalGunEffectHoldingFP.m_pObject,
      2,
      ViewModel,
      PATTACH_POINT_FOLLOW,
      "Arm2_attach3",
      vec3_origin,
      0);
    CParticleProperty::AddControlPoint(
      &ViewModel->m_Particles,
      this->m_hPortalGunEffectHoldingFP.m_pObject,
      3,
      ViewModel,
      PATTACH_POINT_FOLLOW,
      "Arm3_attach3",
      vec3_origin,
      0);
    v29 = vec3_origin;
    v21 = C_BaseCombatWeapon::GetOwner(this);
    CParticleProperty::AddControlPoint(
      &ViewModel->m_Particles,
      this->m_hPortalGunEffectHoldingFP.m_pObject,
      4,
      v21,
      PATTACH_CUSTOMORIGIN,
      0,
      v29,
      0);
    v22 = C_BaseCombatWeapon::GetOwner(this);
    CNewParticleEffect::SetControlPointEntity(this->m_hPortalGunEffectHoldingFP.m_pObject, 4, v22);
    v30 = vec3_origin;
    v23 = C_BaseCombatWeapon::GetOwner(this);
    v24 = (C_BasePlayer_0 *)v23;
    if ( !v23 || !(*((unsigned __int8 (__cdecl **)(C_BaseCombatCharacter *))v23->_vptr_IHandleEntity + 200))(v23) )
      v24 = 0;
    PlayerHeldEntity = GetPlayerHeldEntity(v24);
    CParticleProperty::AddControlPoint(
      p_m_Particles,
      this->m_hPortalGunEffectHoldingFP.m_pObject,
      5,
      PlayerHeldEntity,
      PATTACH_ABSORIGIN_FOLLOW,
      0,
      v30,
      0);
  }
  if ( !this->m_hPortalGunEffectHoldingTP.m_pObject )
  {
    v4 = CParticleProperty::Create(&this->m_Particles, "portalgun_beam_holding_TP", PATTACH_POINT_FOLLOW, "muzzle");
    v5 = this->m_hPortalGunEffectHoldingTP.m_pObject;
    if ( v4 != v5 )
    {
      p_m_hPortalGunEffectHoldingTP = &this->m_hPortalGunEffectHoldingTP;
      if ( v5 )
      {
        v7 = this->m_hPortalGunEffectHoldingTP.m_pPrev;
        if ( v7 )
        {
          v7->m_pNext = this->m_hPortalGunEffectHoldingTP.m_pNext;
          v8 = this->m_hPortalGunEffectHoldingTP.m_pNext;
          if ( v8 )
            v8->m_pPrev = this->m_hPortalGunEffectHoldingTP.m_pPrev;
        }
        else if ( p_m_hPortalGunEffectHoldingTP == v5->m_References.m_pHead )
        {
          v26 = this->m_hPortalGunEffectHoldingTP.m_pNext;
          v5->m_References.m_pHead = v26;
          if ( v26 )
            v26->m_pPrev = 0;
        }
        this->m_hPortalGunEffectHoldingTP.m_pPrev = 0;
        this->m_hPortalGunEffectHoldingTP.m_pNext = 0;
      }
      this->m_hPortalGunEffectHoldingTP.m_pObject = v4;
      if ( v4 )
      {
        this->m_hPortalGunEffectHoldingTP.m_pNext = v4->m_References.m_pHead;
        v9 = v4->m_References.m_pHead;
        if ( v9 )
          v9->m_pPrev = p_m_hPortalGunEffectHoldingTP;
        this->m_hPortalGunEffectHoldingTP.m_pPrev = 0;
        v4->m_References.m_pHead = p_m_hPortalGunEffectHoldingTP;
      }
    }
    CParticleProperty::AddControlPoint(
      &this->m_Particles,
      this->m_hPortalGunEffectHoldingTP.m_pObject,
      1,
      this,
      PATTACH_POINT_FOLLOW,
      "Arm1_attach3",
      vec3_origin,
      0);
    CParticleProperty::AddControlPoint(
      &this->m_Particles,
      this->m_hPortalGunEffectHoldingTP.m_pObject,
      2,
      this,
      PATTACH_POINT_FOLLOW,
      "Arm2_attach3",
      vec3_origin,
      0);
    CParticleProperty::AddControlPoint(
      &this->m_Particles,
      this->m_hPortalGunEffectHoldingTP.m_pObject,
      3,
      this,
      PATTACH_POINT_FOLLOW,
      "Arm3_attach3",
      vec3_origin,
      0);
    vecOriginOffset = vec3_origin;
    v10 = C_BaseCombatWeapon::GetOwner(this);
    CParticleProperty::AddControlPoint(
      &this->m_Particles,
      this->m_hPortalGunEffectHoldingTP.m_pObject,
      4,
      v10,
      PATTACH_CUSTOMORIGIN,
      0,
      vecOriginOffset,
      0);
    v11 = C_BaseCombatWeapon::GetOwner(this);
    CNewParticleEffect::SetControlPointEntity(this->m_hPortalGunEffectHoldingTP.m_pObject, 4, v11);
    v32 = vec3_origin;
    v12 = C_BaseCombatWeapon::GetOwner(this);
    v13 = (C_BasePlayer_0 *)v12;
    if ( !v12 || !(*((unsigned __int8 (__cdecl **)(C_BaseCombatCharacter *))v12->_vptr_IHandleEntity + 200))(v12) )
      v13 = 0;
    v14 = GetPlayerHeldEntity(v13);
    CParticleProperty::AddControlPoint(
      &this->m_Particles,
      this->m_hPortalGunEffectHoldingTP.m_pObject,
      5,
      v14,
      PATTACH_ABSORIGIN_FOLLOW,
      0,
      v32,
      0);
  }
}