void __cdecl C_PortalLaser::UpdateOnRemove(C_PortalLaser *const this)
{
  CNewParticleEffect *m_pObject; // eax
  CUtlReference<CNewParticleEffect> *m_pPrev; // edx
  CUtlReference<CNewParticleEffect> *m_pNext; // eax
  CUtlReference<CNewParticleEffect> *v4; // edx

  if ( this->m_pSparkEffect.m_pObject )
  {
    CParticleProperty::StopEmission(&this->m_Particles, this->m_pSparkEffect.m_pObject, 0, 0, 0, 0);
    m_pObject = this->m_pSparkEffect.m_pObject;
    if ( m_pObject )
    {
      m_pPrev = this->m_pSparkEffect.m_pPrev;
      if ( m_pPrev )
      {
        m_pPrev->m_pNext = this->m_pSparkEffect.m_pNext;
        m_pNext = this->m_pSparkEffect.m_pNext;
        if ( m_pNext )
          m_pNext->m_pPrev = this->m_pSparkEffect.m_pPrev;
      }
      else if ( m_pObject->m_References.m_pHead == &this->m_pSparkEffect )
      {
        v4 = this->m_pSparkEffect.m_pNext;
        m_pObject->m_References.m_pHead = v4;
        if ( v4 )
          v4->m_pPrev = 0;
      }
      this->m_pSparkEffect.m_pPrev = 0;
      this->m_pSparkEffect.m_pNext = 0;
      this->m_pSparkEffect.m_pObject = 0;
    }
  }
  C_BaseEntity::UpdateOnRemove(this);
}