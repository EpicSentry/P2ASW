void __thiscall C_TriggerPortalCleanser::Touch(C_TriggerPortalCleanser *this, C_BaseEntity *pOther)
{
  bool v2; // bl
  C_BaseEntity *v3; // esi
  C_WeaponPortalgun *v4; // eax
  C_WeaponPortalgun *v5; // esi
  char v6; // bl
  C_Prop_Portal *AssociatedPortal; // eax
  C_Prop_Portal *v8; // edi
  C_Prop_Portal *v9; // eax
  C_Prop_Portal *v10; // edi
  void *v11; // [esp-20h] [ebp-24h]
  C_TriggerPortalCleanser *bPortal1Active; // [esp+0h] [ebp-4h]
  bool bPortal2Active; // [esp+Ch] [ebp+8h]

  bPortal1Active = this;
  if ( this->m_bDisabled )
    return;
  if ( !this->m_bPlayersPassTriggerFilters )
    return;
  v2 = FClassnameIs(pOther, "weapon_portalgun");
  if ( !pOther->IsPlayer(pOther) && !v2 )
    return;
  v3 = pOther->IsPlayer(pOther) ? pOther : 0;
  if ( *(int *)(gpGlobals.m_Index + 20) > 1 )
  {
    if ( !v3 )
    {
LABEL_9:
      if ( !v2 )
        return;
      v4 = (C_WeaponPortalgun *)__RTDynamicCast(
                                  pOther,
                                  0,
                                  &C_BaseEntity `RTTI Type Descriptor',
                                  &C_WeaponPortalgun `RTTI Type Descriptor',
                                  0);
      goto LABEL_12;
    }
    if ( !((int (__thiscall *)(C_BaseEntity *, const char *, _DWORD))v3->IClientEntity::IClientUnknown::IHandleEntity::__vftable[1].Restore)(
            v3,
            "weapon_portalgun",
            0) )
      return;
  }
  if ( !v3 )
    goto LABEL_9;
  v11 = (void *)((int (__thiscall *)(C_BaseEntity *, const char *, _DWORD))v3->IClientEntity::IClientUnknown::IHandleEntity::__vftable[1].Restore)(
                  v3,
                  "weapon_portalgun",
                  0);
  v4 = (C_WeaponPortalgun *)__RTDynamicCast(
                              v11,
                              0,
                              &C_BaseCombatWeapon `RTTI Type Descriptor',
                              &C_WeaponPortalgun `RTTI Type Descriptor',
                              0);
LABEL_12:
  v5 = v4;
  if ( !v4 )
    return;
  LOBYTE(bPortal1Active) = 0;
  bPortal2Active = 0;
  v6 = 0;
  if ( C_WeaponPortalgun::CanFirePortal1(v4) )
  {
    AssociatedPortal = C_WeaponPortalgun::GetAssociatedPortal(v5, 0);
    v8 = AssociatedPortal;
    if ( AssociatedPortal )
    {
      if ( AssociatedPortal->IsActive(AssociatedPortal) )
      {
        LOBYTE(bPortal1Active) = 1;
        v8->SetActive(v8, 0);
        v6 = 1;
      }
    }
  }
  if ( C_WeaponPortalgun::CanFirePortal2(v5)
    && (v9 = C_WeaponPortalgun::GetAssociatedPortal(v5, 1), (v10 = v9) != 0)
    && v9->IsActive(v9) )
  {
    bPortal2Active = 1;
    v10->SetActive(v10, 0);
  }
  else if ( !v6 )
  {
    return;
  }
  v5->SendWeaponAnim(v5, 493);
  C_WeaponPortalgun::DoCleanseEffect(v5, (Color)bPortal1Active, bPortal2Active);
  if ( v5->m_iLastFiredPortal.m_Value )
    v5->m_iLastFiredPortal.m_Value = 0;
}