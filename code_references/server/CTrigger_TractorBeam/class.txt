class CTrigger_TractorBeam : public CBaseVPhysicsTrigger, public IMotionEvent, public ITriggerTractorBeamAutoList
{
	DECLARE_CLASS( CTrigger_TractorBeam, CBaseVPhysicsTrigger )
	DECLARE_DATADESC()
public:

	DECLARE_SERVERCLASS();
	
    class CBaseEntity * GetEntity();
    void CTrigger_TractorBeam();
    void ~CTrigger_TractorBeam();
    void Spawn();
    void Precache();
    void Activate();
    void UpdateOnRemove();
    void StopLoopingSounds();
    bool CreateVPhysics();
    void OnRestore();
	
    void StartTouch( CBaseEntity *pOther );
    void EndTouch( CBaseEntity *pOther );
	
    void InputSetVelocityLimitTime(struct inputdata_t & );
	
    float GetLinearLimit();
    float GetLinearForce();
    void SetLinearForce( float );
    void SetLinearForce( Vector & , float );
    void SetAsReversed( bool );
    void SetGravityScale( float );
    void SetAirDensity( float );
    void SetLinearLimit( float );
    void SetAngularLimt( float );
    void SetProxyEntity( CProjectedTractorBeamEntity * );
    void DisablePlayerMovement( bool );
    bool HasGravityScale();
    bool HasAirDensity();
    bool HasLinearLimit();
    bool HasLinearScale();
    bool HasAngularLimit();
    bool HasAngularScale();
    bool HasLinearForce();
    void SetDirection(class Vector & ,class Vector & );
    void UpdateBeam(class Vector & ,class Vector & ,float );
    IMotionEvent::simresult_e Simulate(class IPhysicsMotionController * ,class IPhysicsObject * ,float ,class Vector & ,class Vector & );
    void WakeTouchingObjects();
    void CalculateFrameMovement(class IPhysicsObject * ,class CBaseEntity * ,float ,class Vector & ,class Vector & );
    void SetBeamRadius(float );
    float &GetBeamRadius();
    void RemoveDeadBlobs();
    void RemoveChangedBeamBlobs();
    void RemoveAllBlobsFromBeam();
	
    CTrigger_TractorBeam *CreateTractorBeam(class Vector & ,class Vector & ,class CBaseEntity * );
    
	CUtlVector<CPaintBlob *,CUtlMemory<CPaintBlob *,int> > m_blobs;
    
	int GetLastUpdateFrame();
    void ForceAttachEntity( CBaseEntity * );
    void ForceDetachEntity( CBaseEntity * );
	
    bool IsReversed();
    bool IsFromPortal();
    bool IsToPortal();
	
    Vector GetForceDirection();
    Vector &GetStartPoint();
    Vector &GetEndPoint();
	
private:
	
    void TractorThink();
    IPhysicsMotionController *m_pController;
	
	CNetworkVar( float, m_gravityScale );
	CNetworkVar( float, m_addAirDensity );
	CNetworkVar( float, m_linearLimit );
	CNetworkVar( float, m_linearLimitDelta );
	CNetworkVar( float, m_linearLimitTime );
	CNetworkVar( float, m_linearLimitStart );	
	CNetworkVar( float, m_linearLimitStartTime );
	CNetworkVar( float, m_linearScale );	
	CNetworkVar( float, m_angularLimit );
	CNetworkVar( float, m_angularScale );
	
	CNetworkQAngle( m_linearForceAngles )
	
	CNetworkHandle( CProjectedTractorBeamEntity, m_hProxyEntity );
	
	CNetworkVector( m_vStart );
	CNetworkVector( m_vEnd );
	
	CNetworkVar( float, m_linearForce );
	CNetworkVar( float, m_flRadius );
	
	
	CNetworkVar( bool, m_bDisabled );
	CNetworkVar( bool, m_bReversed );
	CNetworkVar( bool, m_bFromPortal );
	CNetworkVar( bool, m_bToPortal );
	CNetworkVar( bool, m_bDisablePlayerMove );
    
	CSoundPatch *m_sndPlayerInBeam;
	
    int m_nLastUpdateFrame;
};