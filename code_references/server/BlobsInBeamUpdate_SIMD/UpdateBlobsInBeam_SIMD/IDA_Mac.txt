// local variable allocation has failed, the output may be wrong!
void __usercall BlobsInBeamUpdate_SIMD::UpdateBlobsInBeam_SIMD(BlobsInBeamUpdate_SIMD *this@<edi>, unsigned int *a2)
{
  fltx4_6 m_fValue_low; // xmm4
  __m128i v3; // xmm1
  __m128i v4; // xmm2
  unsigned int v5; // ebx
  __m128 v6; // xmm0
  unsigned int v7; // eax
  __m128 v8; // xmm0
  __m128 v9; // xmm6
  __m128i v10; // xmm6
  __m128 v11; // xmm1
  __m128 v12; // xmm0
  __m128i v13; // xmm0
  __m128 v14; // xmm0
  __m128 v15; // xmm3
  __m128i v16; // xmm2
  __m128i v17; // xmm1
  __m128 v18; // xmm0
  fltx4_68 *v19; // edx
  char *v20; // ecx
  char *v21; // eax
  char v22; // cl
  __m128 v23; // xmm3
  __m128 v24; // xmm0
  __m128 v25; // xmm4
  __m128 v26; // xmm5
  __m128 v27; // xmm3
  __m128 v28; // xmm0
  __m128 v29; // xmm4
  __m128 v30; // xmm5
  __m128i v31; // xmm0
  fltx4_6 v32; // xmm2
  fltx4_6 v33; // xmm4
  __m128 v34; // xmm7
  fltx4_6 v35; // xmm3
  fltx4_6 v36; // xmm5
  int v37; // ebx
  unsigned int v38; // esi
  __m128i si128; // xmm0
  __m128 v40; // xmm1
  __m128 v41; // xmm1
  FourVectors_7 *v42; // ecx
  int v43; // esi
  __m128i v44; // xmm1
  unsigned int v45; // eax
  __m128 v46; // xmm1
  __m128 v47; // xmm3
  __m128 v48; // xmm4
  __m128 v49; // xmm5
  __m128 v50; // xmm0
  __m128 v51; // xmm1
  __m128 v52; // xmm1
  __m128 v53; // xmm2
  __m128 v54; // xmm2
  __m128 v55; // xmm3
  __m128 v56; // xmm4
  __m128 v57; // xmm1
  __m128 v58; // xmm0
  unsigned int v59; // eax
  __m128 v60; // xmm1
  __m128 v61; // xmm1
  __m128 v62; // xmm2
  __m128 v63; // xmm3
  __m128 v64; // xmm4
  __m128 v65; // xmm1
  __m128 v66; // xmm2
  __m128 v67; // xmm4
  __m128 v68; // xmm4
  __m128 v69; // xmm3
  __m128 v70; // xmm1
  __m128 v71; // xmm1
  __m128 v72; // xmm3
  __m128 v73; // xmm1
  __m128 v74; // xmm0
  __m128 v75; // xmm3
  __m128 v76; // xmm3
  float v77; // xmm7_4
  float v78; // xmm7_4
  __m128 v79; // xmm1
  __m128 v80; // xmm3
  __m128 v81; // xmm2
  __m128 v82; // xmm6
  __m128 v83; // xmm7
  __m128 v84; // xmm1
  __m128 v85; // xmm2
  __m128 v86; // xmm0
  __m128 v87; // xmm3
  __m128 v88; // xmm0
  __m128 v89; // xmm5
  __m128 v90; // xmm2
  __m128 v91; // xmm3
  __m128 v92; // xmm6
  __m128 v93; // xmm0
  __m128 v94; // xmm2
  __m128 v95; // xmm4
  __m128 v96; // xmm7
  __m128 v97; // xmm2
  __m128 v98; // xmm4
  __m128 v99; // xmm0
  __m128 v100; // xmm7
  __m128 v101; // xmm1
  unsigned int v102; // eax
  __m128 v103; // xmm1
  __m128 v104; // xmm2
  unsigned int v105; // eax
  __m128 v106; // xmm1
  __m128 v107; // xmm2
  __m128 v108; // xmm3
  bool v109; // cc
  unsigned int *v110; // ebx
  __m128 v111; // xmm4
  float v112; // xmm2_4
  int v113; // esi
  unsigned int v114; // eax
  __m128 v115; // xmm0
  float v116; // xmm1_4
  __m128i v117; // xmm0
  __m128 v118; // xmm0
  __m128 v119; // xmm2
  __m128 v120; // xmm1
  __m128 v121; // xmm0
  __m128 v122; // xmm1
  __m128 v123; // xmm4
  __m128 v124; // xmm0
  __m128 v125; // xmm0
  unsigned int v126; // eax
  __m128 v127; // xmm1
  float v128; // xmm2_4
  __m128 v129; // xmm3
  __m128 v130; // xmm4
  __m128 v131; // xmm3
  __m128 v132; // xmm2
  __m128 v133; // xmm4
  float v134; // xmm1_4
  __m128 v135; // xmm3
  __m128 v136; // xmm1
  __m128 v137; // xmm3
  float v138; // xmm1_4
  float v139; // xmm3_4
  __m128 v140; // xmm1
  __m128 v141; // xmm0
  float v142; // xmm2_4
  __m128i v143; // xmm0
  __m128 v144; // xmm0
  __m128 v145; // xmm3
  __m128i v146; // xmm6
  __m128 v147; // xmm0
  __m128 v148; // xmm7
  __m128 v149; // xmm7
  float v150; // xmm2_4
  __m128i v151; // xmm7
  __m128 v152; // xmm2
  __m128 v153; // xmm2
  __m128 v154; // xmm6
  __m128 v155; // xmm1
  float v156; // xmm1_4
  float v157; // xmm6_4
  float v158; // xmm1_4
  __int32 v159; // xmm3_4
  unsigned int v160; // eax
  unsigned int v161; // eax
  unsigned int v162; // [esp+14h] [ebp-594h]
  int v163; // [esp+18h] [ebp-590h]
  char v164; // [esp+23h] [ebp-585h]
  __m128 v165; // [esp+30h] [ebp-578h]
  __m128 v166; // [esp+40h] [ebp-568h]
  __m128 v167; // [esp+50h] [ebp-558h]
  __m128 v168; // [esp+60h] [ebp-548h]
  __m128 v169; // [esp+70h] [ebp-538h]
  __m128 v170; // [esp+80h] [ebp-528h]
  __m128 v171; // [esp+90h] [ebp-518h]
  __m128 v172; // [esp+A0h] [ebp-508h]
  __m128 v173; // [esp+B0h] [ebp-4F8h]
  fltx4_6 f4TbeamCirculation; // [esp+C0h] [ebp-4E8h]
  fltx4_6 f4TbeamPortalCirculation; // [esp+D0h] [ebp-4D8h]
  __m128 v176; // [esp+E0h] [ebp-4C8h]
  __m128 v177; // [esp+F0h] [ebp-4B8h]
  fltx4_6 f4HalfBeamLength; // [esp+100h] [ebp-4A8h]
  fltx4_6 f4BeamLength; // [esp+110h] [ebp-498h]
  fltx4_6 f4VortexAccelDT; // [esp+120h] [ebp-488h]
  fltx4_6 f4VortexRadiusOffsetDT; // [esp+130h] [ebp-478h]
  fltx4_6 f4VortexDistance; // [esp+140h] [ebp-468h]
  __m128 *v183; // [esp+15Ch] [ebp-44Ch]
  __m128 v184; // [esp+160h] [ebp-448h]
  __m128 v185; // [esp+170h] [ebp-438h]
  __m128 v186; // [esp+180h] [ebp-428h]
  __m128 v187; // [esp+190h] [ebp-418h]
  int v188; // [esp+190h] [ebp-418h]
  float v189; // [esp+1A0h] [ebp-408h]
  char v190; // [esp+1BFh] [ebp-3E9h]
  __m128i flHalfBeamLength; // [esp+1C0h] [ebp-3E8h]
  float v192; // [esp+1D0h] [ebp-3D8h]
  __m128 v193; // [esp+1E0h] [ebp-3C8h] BYREF
  __m128 flVortexRadiusOffsetDT; // [esp+1F0h] [ebp-3B8h]
  __m128i flTbeamPortalCirculation; // [esp+200h] [ebp-3A8h]
  __m128i flTbeamCirculation; // [esp+210h] [ebp-398h]
  __m128i flVortexDistance; // [esp+220h] [ebp-388h]
  __m128i flVortexAccelDT; // [esp+230h] [ebp-378h]
  __m128i flDeltaTime; // [esp+240h] [ebp-368h]
  FourVectors_7 *vClosest; // [esp+258h] [ebp-350h]
  const Vector *vBeamEnd; // [esp+25Ch] [ebp-34Ch]
  __m128 v202; // [esp+260h] [ebp-348h]
  __m128 v203; // [esp+270h] [ebp-338h]
  __m128 v204; // [esp+280h] [ebp-328h]
  __m128 v205; // [esp+290h] [ebp-318h]
  __m128 v206; // [esp+2A0h] [ebp-308h]
  __m128 v207; // [esp+2B0h] [ebp-2F8h] BYREF
  fltx4_6 f4NewVortexRadius; // [esp+2C0h] [ebp-2E8h]
  __m128 v209; // [esp+2D0h] [ebp-2D8h]
  __m128 v210; // [esp+2E0h] [ebp-2C8h]
  __m128 v211; // [esp+2F0h] [ebp-2B8h]
  __m128 v212; // [esp+300h] [ebp-2A8h]
  __m128 vBeamStart; // [esp+310h] [ebp-298h]
  __m128 v214; // [esp+320h] [ebp-288h]
  float v215; // [esp+33Ch] [ebp-26Ch]
  fltx4_6 f4BeamSpeed; // [esp+340h] [ebp-268h]
  fltx4_6 f4InvDeltaTime; // [esp+350h] [ebp-258h]
  fltx4_6 f4BeamRadiusSqr; // [esp+360h] [ebp-248h]
  fltx4_6 f4BeamAccelDT; // [esp+370h] [ebp-238h] BYREF
  __m128i flBeamRadius; // [esp+380h] [ebp-228h]
  __m128i flMinVortexRadiusScale; // [esp+390h] [ebp-218h]
  __m128 v222; // [esp+3A0h] [ebp-208h]
  fltx4_6 f4VortexRadius; // [esp+3B0h] [ebp-1F8h] BYREF
  fltx4_6 f4PointOnLine; // [esp+3C0h] [ebp-1E8h] BYREF
  __m128 flCurrentVortexSpeed; // [esp+3D0h] [ebp-1D8h]
  __m128 flCurrentVortexRadius; // [esp+3E0h] [ebp-1C8h] BYREF
  fltx4_6 f4EndVelocity; // [esp+3F0h] [ebp-1B8h]
  fltx4_6 f4DeltaTime; // [esp+400h] [ebp-1A8h]
  fltx4_6 f4EndPos; // [esp+410h] [ebp-198h] BYREF
  unsigned int v230; // [esp+428h] [ebp-180h]
  unsigned int v231; // [esp+42Ch] [ebp-17Ch]
  unsigned int v232; // [esp+430h] [ebp-178h]
  unsigned int v233; // [esp+434h] [ebp-174h]
  unsigned int v234; // [esp+438h] [ebp-170h]
  unsigned int v235; // [esp+43Ch] [ebp-16Ch]
  unsigned int v236; // [esp+440h] [ebp-168h]
  unsigned int v237; // [esp+444h] [ebp-164h]
  double v238; // [esp+448h] [ebp-160h]
  double v239; // [esp+450h] [ebp-158h]
  double v240; // [esp+458h] [ebp-150h]
  double v241; // [esp+460h] [ebp-148h]
  unsigned int v242; // [esp+46Ch] [ebp-13Ch]
  Vector vecTemp; // [esp+470h] [ebp-138h] BYREF
  __m128 vecVortexRadius; // [esp+480h] [ebp-128h] OVERLAPPED BYREF
  Quaternion qRotate; // [esp+490h] [ebp-118h] BYREF
  Vector vTempEndPos; // [esp+4A0h] [ebp-108h] BYREF
  float flDistOnLine; // [esp+4ACh] [ebp-FCh] BYREF
  __m128 vecPointOnLine; // [esp+4B0h] [ebp-F8h] OVERLAPPED BYREF
  fltx4_6 f4DistOnLine; // [esp+4C0h] [ebp-E8h]
  FourVectors_1 v4VecPointOnline; // [esp+4D0h] [ebp-D8h]
  FourVectors_1 v4EndPos; // [esp+500h] [ebp-A8h] BYREF
  FourVectors_1 v4BeamEnd; // [esp+530h] [ebp-78h]
  FourVectors_1 v4BeamStart; // [esp+560h] [ebp-48h] BYREF
  Vector vBeamDir; // [esp+590h] [ebp-18h] BYREF

  vClosest = (FourVectors_7 *)&loc_CE781;
  flDeltaTime = (__m128i)*a2;
  m_fValue_low = (fltx4_6)LODWORD(paintblob_tbeam_accel.m_pParent->m_Value.m_fValue);
  v3 = (__m128i)LODWORD(paintblob_tbeam_vortex_accel.m_pParent->m_Value.m_fValue);
  flVortexDistance = (__m128i)LODWORD(paintblob_tbeam_vortex_distance.m_pParent->m_Value.m_fValue);
  flTbeamCirculation = (__m128i)LODWORD(paintblob_tbeam_vortex_circulation.m_pParent->m_Value.m_fValue);
  flTbeamPortalCirculation = (__m128i)LODWORD(paintblob_tbeam_portal_vortex_circulation.m_pParent->m_Value.m_fValue);
  v4 = (__m128i)LODWORD(paintblob_tbeam_vortex_radius_rate.m_pParent->m_Value.m_fValue);
  v5 = a2[1];
  vBeamEnd = (const Vector *)v5;
  vBeamDir.x = *(float *)(v5 + 992) - *(float *)(v5 + 980);
  vBeamDir.y = *(float *)(v5 + 996) - *(float *)(v5 + 984);
  vBeamDir.z = *(float *)(v5 + 1000) - *(float *)(v5 + 988);
  v6 = (__m128)0x3F800000u;
  v215 = 1.0;
  v6.f32[0] = 1.0 / *(float *)flDeltaTime.i32;
  flCurrentVortexRadius = v6;
  m_fValue_low.f32[0] = m_fValue_low.f32[0] * *(float *)flDeltaTime.i32;
  f4EndPos = m_fValue_low;
  *(float *)v3.i32 = *(float *)v3.i32 * *(float *)flDeltaTime.i32;
  flVortexAccelDT = v3;
  *(float *)v4.i32 = *(float *)v4.i32 * *(float *)flDeltaTime.i32;
  flVortexRadiusOffsetDT = (__m128)v4;
  *(float *)&v242 = VectorNormalize(&vBeamDir);
  v7 = a2[1];
  v8 = (__m128)*(unsigned int *)(v7 + 1008);
  v8.f32[0] = v8.f32[0] - paintblob_beam_radius_offset.m_pParent->m_Value.m_fValue;
  v9 = _mm_cmplt_ss((__m128)0LL, v8);
  v10 = (__m128i)_mm_or_ps(_mm_andnot_ps(v9, (__m128)0x3F800000u), _mm_and_ps(v8, v9));
  flBeamRadius = v10;
  v11 = _mm_sub_ps(*(__m128 *)(v7 + 992), *(__m128 *)(v7 + 980));
  v12 = _mm_mul_ps(v11, v11);
  *(float *)v4.i32 = *(float *)_mm_shuffle_epi32((__m128i)v12, 1).i32 + v12.f32[0];
  v13 = (__m128i)_mm_movehl_ps(v12, v12);
  *(float *)v13.i32 = *(float *)v13.i32 + *(float *)v4.i32;
  v14 = (__m128)_mm_shuffle_epi32(v13, 0);
  v15 = _mm_rsqrt_ps(v14);
  v214 = Four_PointFives;
  v192 = *(float *)&v242;
  v193 = _mm_and_ps(
           _mm_mul_ps(
             _mm_mul_ps(
               _mm_mul_ps(_mm_sub_ps(Four_Threes, _mm_mul_ps(_mm_mul_ps(v15, v15), v14)), v15),
               Four_PointFives),
             v11),
           _mm_cmplt_ps(Four_Epsilons, v14));
  v16 = (__m128i)v242;
  *(float *)v16.i32 = *(float *)&v242 * 0.5;
  flHalfBeamLength = v16;
  v17 = (__m128i)_mm_and_ps((__m128)*(unsigned int *)(v7 + 1004), (__m128)xmmword_86BB50);
  *(float *)v17.i32 = *(float *)v17.i32 * 0.5;
  v18 = *(__m128 *)(v5 + 980);
  LOBYTE(v19) = *(_BYTE *)(v7 + 1012);
  v20 = (char *)(v7 + 1013);
  v21 = (char *)(v7 + 1014);
  if ( (_BYTE)v19 )
    v21 = v20;
  v22 = *v21;
  v4BeamStart.x = *(fltx4_6 *)(v5 + 980);
  v4BeamStart.y = *(fltx4_6 *)(v5 + 980);
  v23 = _mm_unpacklo_ps(v18, v4BeamStart.y);
  v24 = _mm_unpackhi_ps(v18, v4BeamStart.y);
  v4BeamStart.z = *(fltx4_6 *)(v5 + 980);
  v25 = *(__m128 *)(v5 + 980);
  v26 = _mm_unpacklo_ps(v4BeamStart.z, v25);
  v4BeamStart.x = _mm_movelh_ps(v23, v26);
  v4BeamStart.y = _mm_movehl_ps(v26, v23);
  v4BeamStart.z = _mm_movelh_ps(v24, _mm_unpackhi_ps(v4BeamStart.z, v25));
  v4BeamEnd.x = *(fltx4_6 *)(v5 + 992);
  v4BeamEnd.y = *(fltx4_6 *)(v5 + 992);
  v27 = _mm_unpacklo_ps(v4BeamEnd.x, v4BeamEnd.y);
  v28 = _mm_unpackhi_ps(v4BeamEnd.x, v4BeamEnd.y);
  v4BeamEnd.z = *(fltx4_6 *)(v5 + 992);
  v29 = *(__m128 *)(v5 + 992);
  v30 = _mm_unpacklo_ps(v4BeamEnd.z, v29);
  v4BeamEnd.x = _mm_movelh_ps(v27, v30);
  v4BeamEnd.y = _mm_movehl_ps(v30, v27);
  v4BeamEnd.z = _mm_movelh_ps(v28, _mm_unpackhi_ps(v4BeamEnd.z, v29));
  v31 = (__m128i)0x3F800000u;
  v32 = (fltx4_6)_mm_shuffle_epi32(flDeltaTime, 0);
  f4EndVelocity = (fltx4_6)_mm_shuffle_epi32(v10, 0);
  *(float *)v31.i32 = 1.0 / *(float *)v10.i32;
  flMinVortexRadiusScale = v31;
  v33 = (fltx4_6)_mm_shuffle_epi32((__m128i)flCurrentVortexRadius, 0);
  v34 = (__m128)_mm_shuffle_epi32((__m128i)f4EndPos, 0);
  f4BeamAccelDT = v34;
  v35 = _mm_mul_ps(f4EndVelocity, f4EndVelocity);
  v36 = (fltx4_6)_mm_shuffle_epi32(v17, 0);
  v37 = a2[5];
  v38 = 0;
  if ( v37 < 4 )
  {
    f4BeamSpeed = v36;
    f4InvDeltaTime = v33;
    f4BeamRadiusSqr = v35;
    f4DeltaTime = v32;
    v190 = (char)v19;
  }
  else
  {
    f4BeamSpeed = v36;
    f4InvDeltaTime = v33;
    si128 = _mm_load_si128((const __m128i *)&vBeamDir);
    v40 = (__m128)-1LL;
    if ( !(_BYTE)v19 )
      v40 = 0LL;
    f4BeamAccelDT = v34;
    v187 = v40;
    f4DeltaTime = v32;
    v190 = (char)v19;
    vBeamStart = (__m128)_mm_shuffle_epi32(flMinVortexRadiusScale, 0);
    v164 = v22;
    v41 = (__m128)-1LL;
    if ( !v22 )
      v41 = 0LL;
    v184 = v41;
    v42 = vClosest;
    flCurrentVortexRadius = *(__m128 *)*(int *)((char *)&dword_976B43 + (_DWORD)vClosest);
    v186 = *(__m128 *)*(int *)((char *)&dword_976B33 + (_DWORD)vClosest);
    v212 = *(__m128 *)*(int *)((char *)&dword_976B37 + (_DWORD)vClosest);
    v185 = *(__m128 *)*(int *)((char *)&dword_976B2B + (_DWORD)vClosest);
    v163 = v37 - 4;
    v162 = (v37 - 4) & 0xFFFFFFFC;
    v43 = 128;
    v183 = *(__m128 **)((char *)&dword_976B4F + (_DWORD)vClosest);
    f4VortexDistance = (fltx4_6)_mm_shuffle_epi32(flVortexDistance, 0);
    f4VortexRadiusOffsetDT = (fltx4_6)_mm_shuffle_epi32((__m128i)flVortexRadiusOffsetDT, 0);
    f4VortexAccelDT = (fltx4_6)_mm_shuffle_epi32(flVortexAccelDT, 0);
    f4BeamLength = (fltx4_6)_mm_shuffle_epi32((__m128i)v242, 0);
    f4HalfBeamLength = (fltx4_6)_mm_shuffle_epi32(flHalfBeamLength, 0);
    v177 = (__m128)_mm_shuffle_epi32(si128, 0);
    v176 = (__m128)_mm_shuffle_epi32(si128, 85);
    f4TbeamPortalCirculation = (fltx4_6)_mm_shuffle_epi32(flTbeamPortalCirculation, 0);
    f4TbeamCirculation = (fltx4_6)_mm_shuffle_epi32(flTbeamCirculation, 0);
    v44 = _mm_load_si128((const __m128i *)&v193);
    v173 = (__m128)_mm_shuffle_epi32(v44, 0);
    v172 = (__m128)_mm_shuffle_epi32(v44, 85);
    v171 = (__m128)_mm_shuffle_epi32(v44, 170);
    f4BeamRadiusSqr = v35;
    v165 = *(__m128 *)((char *)&vClosest[166474].x + 15);
    v211 = (__m128)_mm_shuffle_epi32(si128, 170);
    v168 = (__m128)_mm_xor_si128((__m128i)-1LL, (__m128i)v187);
    v170 = _mm_sub_ps(v35, flCurrentVortexRadius);
    v169 = _mm_sub_ps(v212, flCurrentVortexRadius);
    v167 = _mm_sub_ps(f4EndVelocity, v212);
    v166 = _mm_sub_ps(v212, vBeamStart);
    v34 = f4BeamAccelDT;
    do
    {
      v45 = a2[2];
      v46 = *(__m128 *)(v45 + v43 - 76);
      v47 = *(__m128 *)(v45 + v43 + 4);
      v48 = _mm_unpacklo_ps(*(__m128 *)(v45 + v43 - 116), v46);
      v49 = _mm_unpacklo_ps(*(__m128 *)(v45 + v43 - 36), v47);
      v50 = _mm_add_ps(
              _mm_mul_ps(
                _mm_movelh_ps(
                  _mm_unpackhi_ps(*(__m128 *)(v45 + v43 - 116), v46),
                  _mm_unpackhi_ps(*(__m128 *)(v45 + v43 - 36), v47)),
                v211),
              _mm_add_ps(_mm_mul_ps(_mm_movehl_ps(v49, v48), v176), _mm_mul_ps(_mm_movelh_ps(v48, v49), v177)));
      v51 = _mm_cmplt_ps(v50, flCurrentVortexRadius);
      v52 = _mm_add_ps(_mm_or_ps(_mm_andnot_ps(v51, v50), _mm_and_ps(v51, flCurrentVortexRadius)), v34);
      v53 = _mm_cmplt_ps(v52, f4BeamSpeed);
      v54 = _mm_or_ps(_mm_andnot_ps(v53, f4BeamSpeed), _mm_and_ps(v52, v53));
      flCurrentVortexSpeed = _mm_mul_ps(v177, v54);
      v4EndPos.x = *(fltx4_6 *)(v45 + v43 - 128);
      v4EndPos.y = *(fltx4_6 *)(v45 + v43 - 88);
      v4EndPos.z = *(fltx4_6 *)(v45 + v43 - 48);
      v55 = *(__m128 *)(v45 + v43 - 8);
      v56 = _mm_unpacklo_ps(v4EndPos.x, v4EndPos.y);
      v57 = _mm_unpacklo_ps(v4EndPos.z, v55);
      v209 = _mm_mul_ps(v176, v54);
      v210 = _mm_mul_ps(v54, v211);
      v58 = _mm_movelh_ps(_mm_unpackhi_ps(v4EndPos.x, v4EndPos.y), _mm_unpackhi_ps(v4EndPos.z, v55));
      v4EndPos.x = _mm_add_ps(_mm_mul_ps(f4DeltaTime, flCurrentVortexSpeed), _mm_movelh_ps(v56, v57));
      v4EndPos.y = _mm_add_ps(_mm_mul_ps(f4DeltaTime, v209), _mm_movehl_ps(v57, v56));
      v4EndPos.z = _mm_add_ps(_mm_mul_ps(f4DeltaTime, v210), v58);
      FourVectors::CalcClosestPointOnLineSIMD(
        (const FourVectors_7 *)&v4EndPos,
        (const FourVectors_7 *)&v4EndPos,
        (const FourVectors_7 *)&v4BeamStart,
        v42,
        v19);
      f4DistOnLine = _mm_mul_ps(f4DistOnLine, f4BeamLength);
      v59 = a2[2];
      v60 = _mm_and_ps(
              _mm_cmplt_ps(_mm_sub_ps(_mm_sub_ps(f4BeamLength, f4DistOnLine), f4VortexDistance), flCurrentVortexRadius),
              v184);
      v61 = _mm_or_ps(
              _mm_andnot_ps(
                v60,
                _mm_unpacklo_ps(
                  _mm_unpacklo_ps((__m128)*(unsigned int *)(v59 + v43 - 96), (__m128)*(unsigned int *)(v59 + v43 - 16)),
                  _mm_unpacklo_ps((__m128)*(unsigned int *)(v59 + v43 - 56), (__m128)*(unsigned int *)(v59 + v43 + 24)))),
              _mm_and_ps(v60, vBeamStart));
      v62 = _mm_cmplt_ps(
              _mm_sub_ps(
                _mm_sub_ps(f4HalfBeamLength, _mm_and_ps(_mm_sub_ps(f4DistOnLine, f4HalfBeamLength), *v183)),
                f4VortexDistance),
              flCurrentVortexRadius);
      v63 = _mm_mul_ps(
              _mm_unpacklo_ps(
                _mm_unpacklo_ps((__m128)*(unsigned int *)(v59 + v43 - 104), (__m128)*(unsigned int *)(v59 + v43 - 24)),
                _mm_unpacklo_ps((__m128)*(unsigned int *)(v59 + v43 - 64), (__m128)*(unsigned int *)(v59 + v43 + 16))),
              f4EndVelocity);
      v64 = _mm_unpacklo_ps((__m128)*(unsigned int *)(v59 + v43 - 60), (__m128)*(unsigned int *)(v59 + v43 + 20));
      f4EndPos = _mm_mul_ps(
                   _mm_rcp_ps(_mm_mul_ps(v63, v165)),
                   _mm_or_ps(_mm_andnot_ps(v62, f4TbeamCirculation), _mm_and_ps(v62, f4TbeamPortalCirculation)));
      v65 = _mm_mul_ps(v61, f4EndVelocity);
      v66 = _mm_unpacklo_ps(
              _mm_unpacklo_ps((__m128)*(unsigned int *)(v59 + v43 - 100), (__m128)*(unsigned int *)(v59 + v43 - 20)),
              v64);
      v67 = _mm_cmplt_ps(_mm_sub_ps(v65, v63), flCurrentVortexRadius);
      v68 = _mm_or_ps(_mm_andnot_ps(v67, v212), _mm_and_ps(v67, v186));
      f4NewVortexRadius = _mm_add_ps(_mm_mul_ps(f4VortexRadiusOffsetDT, v68), v63);
      v69 = _mm_cmplt_ps(flCurrentVortexRadius, _mm_mul_ps(_mm_sub_ps(v65, f4NewVortexRadius), v68));
      v206 = _mm_or_ps(_mm_andnot_ps(v69, v65), _mm_and_ps(v69, f4NewVortexRadius));
      v70 = _mm_cmplt_ps(_mm_sub_ps(f4EndPos, v66), flCurrentVortexRadius);
      v71 = _mm_or_ps(_mm_andnot_ps(v70, v212), _mm_and_ps(v70, v186));
      v72 = _mm_add_ps(_mm_mul_ps(f4VortexAccelDT, v71), v66);
      v73 = _mm_cmplt_ps(flCurrentVortexRadius, _mm_mul_ps(_mm_sub_ps(f4EndPos, v72), v71));
      v74 = (__m128)*(unsigned int *)(v59 + v43 + 28);
      v207 = _mm_or_ps(_mm_andnot_ps(v73, f4EndPos), _mm_and_ps(v72, v73));
      v75 = _mm_unpacklo_ps(
              _mm_unpacklo_ps((__m128)*(unsigned int *)(v59 + v43 - 92), (__m128)*(unsigned int *)(v59 + v43 - 12)),
              _mm_unpacklo_ps((__m128)*(unsigned int *)(v59 + v43 - 52), v74));
      v76 = _mm_mul_ps(
              _mm_mul_ps(
                _mm_mul_ps(
                  _mm_mul_ps(
                    _mm_or_ps(_mm_and_ps(v75, v168), _mm_and_ps(_mm_sub_ps(flCurrentVortexRadius, v75), v187)),
                    v207),
                  f4DeltaTime),
                v185),
              v214);
      v202 = _mm_sub_ps(v4EndPos.x, v4VecPointOnline.x);
      v205 = _mm_sub_ps(v4EndPos.y, v4VecPointOnline.y);
      f4EndPos = _mm_sub_ps(v4EndPos.z, v4VecPointOnline.z);
      v238 = v76.f32[0];
      v77 = *(float *)_mm_shuffle_epi32((__m128i)v76, 1).i32;
      *(float *)&v236 = sin(v76.f32[0]);
      *(float *)&v237 = cos(v76.f32[0]);
      v239 = v77;
      *(float *)&v234 = sin(v77);
      *(float *)&v235 = cos(v77);
      v78 = _mm_movehl_ps(v76, v76).f32[0];
      v240 = v78;
      *(float *)&v232 = sin(v78);
      *(float *)&v233 = cos(v78);
      v76.f32[0] = *(float *)_mm_shuffle_epi32((__m128i)v76, 3).i32;
      v241 = v76.f32[0];
      *(float *)&v230 = sin(v76.f32[0]);
      v79 = _mm_unpacklo_ps(_mm_unpacklo_ps((__m128)v236, (__m128)v232), _mm_unpacklo_ps((__m128)v234, (__m128)v230));
      *(float *)&v231 = cos(v76.f32[0]);
      v222 = _mm_unpacklo_ps(_mm_unpacklo_ps((__m128)v237, (__m128)v233), _mm_unpacklo_ps((__m128)v235, (__m128)v231));
      f4VortexRadius = _mm_mul_ps(v172, v79);
      v203 = _mm_mul_ps(v173, v79);
      v204 = _mm_mul_ps(v79, v171);
      v80 = _mm_sub_ps(_mm_add_ps(_mm_mul_ps(v202, v222), _mm_mul_ps(f4EndPos, f4VortexRadius)), _mm_mul_ps(v205, v204));
      v81 = _mm_sub_ps(_mm_add_ps(_mm_mul_ps(v205, v222), _mm_mul_ps(v202, v204)), _mm_mul_ps(f4EndPos, v203));
      v82 = _mm_sub_ps(_mm_add_ps(_mm_mul_ps(f4EndPos, v222), _mm_mul_ps(v205, v203)), _mm_mul_ps(v202, f4VortexRadius));
      f4EndPos = _mm_add_ps(
                   _mm_mul_ps(f4EndPos, v204),
                   _mm_add_ps(_mm_mul_ps(v202, v203), _mm_mul_ps(v205, f4VortexRadius)));
      v83 = _mm_add_ps(
              _mm_mul_ps(f4VortexRadius, v82),
              _mm_sub_ps(_mm_add_ps(_mm_mul_ps(v203, f4EndPos), _mm_mul_ps(v222, v80)), _mm_mul_ps(v204, v81)));
      v84 = _mm_add_ps(
              _mm_mul_ps(v204, v80),
              _mm_sub_ps(_mm_add_ps(_mm_mul_ps(f4VortexRadius, f4EndPos), _mm_mul_ps(v222, v81)), _mm_mul_ps(v203, v82)));
      v85 = _mm_add_ps(
              _mm_mul_ps(v81, v203),
              _mm_sub_ps(_mm_add_ps(_mm_mul_ps(f4EndPos, v204), _mm_mul_ps(v82, v222)), _mm_mul_ps(v80, f4VortexRadius)));
      v86 = _mm_add_ps(_mm_mul_ps(v85, v85), _mm_add_ps(_mm_mul_ps(v84, v84), _mm_mul_ps(v83, v83)));
      v87 = _mm_rsqrt_ps(v86);
      v88 = _mm_mul_ps(_mm_mul_ps(_mm_sub_ps(Four_Threes, _mm_mul_ps(_mm_mul_ps(v87, v87), v86)), v87), v214);
      v89 = _mm_mul_ps(_mm_mul_ps(v88, v85), v206);
      f4EndPos = _mm_add_ps(_mm_mul_ps(_mm_mul_ps(v83, v88), v206), v4VecPointOnline.x);
      v90 = _mm_sub_ps(v4VecPointOnline.x, v4EndPos.x);
      f4VortexRadius = _mm_add_ps(_mm_mul_ps(_mm_mul_ps(v84, v88), v206), v4VecPointOnline.y);
      v91 = _mm_sub_ps(v4VecPointOnline.y, v4EndPos.y);
      f4PointOnLine = _mm_add_ps(v89, v4VecPointOnline.z);
      v92 = _mm_sub_ps(v4VecPointOnline.z, v4EndPos.z);
      v93 = _mm_cmpeq_ps(flCurrentVortexRadius, f4BeamRadiusSqr);
      v94 = _mm_add_ps(
              _mm_mul_ps(
                _mm_max_ps(
                  flCurrentVortexRadius,
                  _mm_min_ps(
                    v212,
                    _mm_div_ps(
                      _mm_sub_ps(
                        _mm_add_ps(_mm_mul_ps(v92, v92), _mm_add_ps(_mm_mul_ps(v91, v91), _mm_mul_ps(v90, v90))),
                        flCurrentVortexRadius),
                      _mm_or_ps(_mm_andnot_ps(v93, v170), _mm_and_ps(v93, v212))))),
                v169),
              flCurrentVortexRadius);
      v95 = _mm_mul_ps(_mm_mul_ps(_mm_sub_ps(f4EndPos, v4EndPos.x), f4InvDeltaTime), v94);
      v96 = _mm_mul_ps(_mm_mul_ps(_mm_sub_ps(f4VortexRadius, v4EndPos.y), f4InvDeltaTime), v94);
      v97 = _mm_mul_ps(v94, _mm_mul_ps(_mm_sub_ps(f4PointOnLine, v4EndPos.z), f4InvDeltaTime));
      v98 = _mm_add_ps(v95, flCurrentVortexSpeed);
      v99 = _mm_cmpeq_ps(v212, f4EndVelocity);
      v100 = _mm_add_ps(v96, v209);
      v101 = _mm_add_ps(
               _mm_mul_ps(
                 _mm_max_ps(
                   flCurrentVortexRadius,
                   _mm_min_ps(
                     v212,
                     _mm_div_ps(
                       _mm_sub_ps(f4NewVortexRadius, v212),
                       _mm_or_ps(_mm_andnot_ps(v99, v167), _mm_and_ps(v99, v212))))),
                 v166),
               vBeamStart);
      v102 = a2[2];
      *(_DWORD *)(v102 + v43 - 104) = v101.i32[0];
      *(_DWORD *)(v102 + v43 - 64) = _mm_shuffle_epi32((__m128i)v101, 1).u32[0];
      *(_DWORD *)(v102 + v43 - 24) = _mm_movehl_ps(v101, v101).u32[0];
      *(_DWORD *)(v102 + v43 + 16) = _mm_shuffle_epi32((__m128i)v101, 3).u32[0];
      v103 = (__m128)_mm_load_si128((const __m128i *)&v207);
      *(_DWORD *)(v102 + v43 - 100) = v103.i32[0];
      v104 = _mm_add_ps(v97, v210);
      *(_DWORD *)(v102 + v43 - 60) = _mm_shuffle_epi32((__m128i)v103, 1).u32[0];
      *(_DWORD *)(v102 + v43 - 20) = _mm_movehl_ps(v103, v103).u32[0];
      *(_DWORD *)(v102 + v43 + 20) = _mm_shuffle_epi32((__m128i)v103, 3).u32[0];
      *(_DWORD *)(v102 + v43 - 116) = v98.i32[0];
      *(_DWORD *)(v102 + v43 - 112) = v100.i32[0];
      *(_DWORD *)(v102 + v43 - 108) = v104.i32[0];
      *(_DWORD *)(v102 + v43 - 76) = _mm_shuffle_epi32((__m128i)v98, 1).u32[0];
      *(_DWORD *)(v102 + v43 - 72) = _mm_shuffle_epi32((__m128i)v100, 1).u32[0];
      *(_DWORD *)(v102 + v43 - 68) = _mm_shuffle_epi32((__m128i)v104, 1).u32[0];
      *(_DWORD *)(v102 + v43 - 36) = _mm_movehl_ps(v98, v98).u32[0];
      v103.i32[0] = _mm_shuffle_epi32((__m128i)v100, 3).u32[0];
      *(_DWORD *)(v102 + v43 - 32) = _mm_movehl_ps(v100, v100).u32[0];
      v34 = (__m128)_mm_load_si128((const __m128i *)&f4BeamAccelDT);
      *(_DWORD *)(v102 + v43 - 28) = _mm_movehl_ps(v104, v104).u32[0];
      *(_DWORD *)(v102 + v43 + 4) = _mm_shuffle_epi32((__m128i)v98, 3).u32[0];
      *(_DWORD *)(v102 + v43 + 8) = v103.i32[0];
      *(_DWORD *)(v102 + v43 + 12) = _mm_shuffle_epi32((__m128i)v104, 3).u32[0];
      v105 = a2[2];
      v106 = (__m128)_mm_load_si128((const __m128i *)&f4EndPos);
      *(_DWORD *)(v105 + v43 - 128) = v106.i32[0];
      v107 = (__m128)_mm_load_si128((const __m128i *)&f4VortexRadius);
      *(_DWORD *)(v105 + v43 - 124) = v107.i32[0];
      v108 = (__m128)_mm_load_si128((const __m128i *)&f4PointOnLine);
      *(_DWORD *)(v105 + v43 - 120) = v108.i32[0];
      *(_DWORD *)(v105 + v43 - 88) = _mm_shuffle_epi32((__m128i)v106, 1).u32[0];
      *(_DWORD *)(v105 + v43 - 84) = _mm_shuffle_epi32((__m128i)v107, 1).u32[0];
      *(_DWORD *)(v105 + v43 - 80) = _mm_shuffle_epi32((__m128i)v108, 1).u32[0];
      *(_DWORD *)(v105 + v43 - 48) = _mm_movehl_ps(v106, v106).u32[0];
      *(_DWORD *)(v105 + v43 - 44) = _mm_movehl_ps(v107, v107).u32[0];
      *(_DWORD *)(v105 + v43 - 40) = _mm_movehl_ps(v108, v108).u32[0];
      *(_DWORD *)(v105 + v43 - 8) = _mm_shuffle_epi32((__m128i)v106, 3).u32[0];
      *(_DWORD *)(v105 + v43 - 4) = _mm_shuffle_epi32((__m128i)v107, 3).u32[0];
      *(_DWORD *)(v105 + v43) = _mm_shuffle_epi32((__m128i)v108, 3).u32[0];
      v37 -= 4;
      v43 += 160;
    }
    while ( v37 > 3 );
    v37 = v163 - v162;
    v10.i32[0] = flBeamRadius.i32[0];
    v22 = v164;
    v38 = v162 + 4;
  }
  v214.i32[0] = v37;
  v109 = v37 <= 0;
  v110 = a2;
  if ( !v109 )
  {
    vBeamStart.i32[0] = (__int32)&vBeamEnd[81].z;
    vBeamEnd = (const Vector *)((char *)vBeamEnd + 992);
    v111 = *(__m128 *)*(int *)((char *)&dword_976B43 + (_DWORD)vClosest);
    v212 = v111;
    v211.i8[0] = v22 == 0;
    v210 = Four_Epsilons;
    v209 = Four_Threes;
    f4NewVortexRadius = Four_PointFives;
    v207 = *(__m128 *)*(int *)((char *)&dword_976B37 + (_DWORD)vClosest);
    v112 = *(float *)((char *)vClosest[166320].z.f32 + 3);
    v204.i32[0] = *(__int32 *)((char *)&vClosest[166334].z.i32[3] + 3);
    v203.i32[0] = *(__int32 *)((char *)&vClosest[166473].z.i32[3] + 3);
    v222.i32[0] = *(__int32 *)((char *)vClosest[166320].z.i32 + 3);
    v188 = *(__int32 *)((char *)&vClosest[166335].z.i32[3] + 3);
    v206 = _mm_sub_ps(f4BeamRadiusSqr, v111);
    v205 = _mm_sub_ps(v207, v111);
    v202.f32[0] = v112 + *(float *)v10.i32;
    v189 = v215 - *(float *)flMinVortexRadiusScale.i32;
    v113 = 40 * v38;
    do
    {
      v114 = v110[2];
      v115 = _mm_mul_ps(*(__m128 *)(v114 + v113 + 12), v193);
      v116 = *(float *)_mm_shuffle_epi32((__m128i)v115, 1).i32 + v115.f32[0];
      v117 = (__m128i)_mm_movehl_ps(v115, v115);
      *(float *)v117.i32 = *(float *)v117.i32 + v116;
      v118 = (__m128)_mm_shuffle_epi32(v117, 0);
      v119 = _mm_cmplt_ps(v118, v111);
      v120 = _mm_andnot_ps(v119, v118);
      v121 = *(__m128 *)(v114 + v113);
      v122 = _mm_add_ps(_mm_or_ps(v120, _mm_and_ps(v119, v111)), v34);
      v123 = _mm_cmplt_ps(v122, f4BeamSpeed);
      f4EndVelocity = _mm_mul_ps(_mm_or_ps(_mm_andnot_ps(v123, f4BeamSpeed), _mm_and_ps(v122, v123)), v193);
      f4EndPos = _mm_add_ps(_mm_mul_ps(f4DeltaTime, f4EndVelocity), v121);
      LODWORD(vTempEndPos.x) = f4EndPos.i32[0];
      LODWORD(vTempEndPos.y) = _mm_shuffle_epi32((__m128i)f4EndPos, 1).u32[0];
      LODWORD(vTempEndPos.z) = _mm_movehl_ps(f4EndPos, f4EndPos).u32[0];
      CalcClosestPointOnLine(
        &vTempEndPos,
        (const Vector *)vBeamStart.i32[0],
        vBeamEnd,
        (Vector *)&vecPointOnLine,
        &flDistOnLine);
      flDistOnLine = flDistOnLine * v192;
      v119.f32[0] = (float)(*(float *)flHalfBeamLength.i32
                          - COERCE_FLOAT(COERCE_UNSIGNED_INT(flDistOnLine - *(float *)flHalfBeamLength.i32) & v204.i32[0]))
                  - *(float *)flVortexDistance.i32;
      v124 = _mm_cmple_ss((__m128)0LL, v119);
      v125 = _mm_or_ps(
               _mm_andnot_ps(v124, (__m128)flTbeamPortalCirculation),
               _mm_and_ps(v124, (__m128)flTbeamCirculation));
      v126 = v110[2];
      v127 = (__m128)flMinVortexRadiusScale;
      if ( (v211.i8[0] | ((float)((float)(v192 - flDistOnLine) - *(float *)flVortexDistance.i32) >= 0.0)) == 1 )
        v127 = (__m128)*(unsigned int *)(v126 + v113 + 32);
      v127.f32[0] = v127.f32[0] * *(float *)flBeamRadius.i32;
      v128 = *(float *)(v126 + v113 + 24) * *(float *)flBeamRadius.i32;
      v125.f32[0] = v125.f32[0] / (float)(v128 * v203.f32[0]);
      v129.f32[0] = v127.f32[0] - v128;
      v130 = _mm_cmple_ss((__m128)0LL, v129);
      v130.i32[0] = _mm_andnot_ps(v130, (__m128)v222.u32[0]).u32[0] | v130.i32[0] & LODWORD(v215);
      v131 = flVortexRadiusOffsetDT;
      v131.f32[0] = (float)(flVortexRadiusOffsetDT.f32[0] * v130.f32[0]) + v128;
      v132.f32[0] = (float)(v127.f32[0] - v131.f32[0]) * v130.f32[0];
      v133 = _mm_cmple_ss((__m128)0LL, v132);
      flCurrentVortexRadius = _mm_or_ps(_mm_andnot_ps(v133, v127), _mm_and_ps(v131, v133));
      v134 = *(float *)(v126 + v113 + 28);
      v132.f32[0] = v125.f32[0] - v134;
      v135 = _mm_cmple_ss((__m128)0LL, v132);
      v135.i32[0] = _mm_andnot_ps(v135, (__m128)v222.u32[0]).u32[0] | v135.i32[0] & LODWORD(v215);
      v132.f32[0] = (float)(*(float *)flVortexAccelDT.i32 * v135.f32[0]) + v134;
      v136.f32[0] = (float)(v125.f32[0] - v132.f32[0]) * v135.f32[0];
      v137 = _mm_cmple_ss((__m128)0LL, v136);
      v138 = *(float *)(v126 + v113 + 36);
      LODWORD(v139) = _mm_andnot_ps(v137, v125).u32[0] | v132.i32[0] & v137.i32[0];
      f4PointOnLine = vecPointOnLine;
      f4VortexRadius = _mm_sub_ps(f4EndPos, vecPointOnLine);
      if ( v190 )
        LODWORD(v138) ^= v188;
      flCurrentVortexSpeed.f32[0] = v139;
      AxisAngleQuaternion(&vBeamDir, (float)(v138 * *(float *)flDeltaTime.i32) * v139, &qRotate);
      v140 = (__m128)_mm_load_si128((const __m128i *)&f4VortexRadius);
      vecVortexRadius.i32[0] = v140.i32[0];
      vecVortexRadius.i32[1] = _mm_shuffle_epi32((__m128i)v140, 1).u32[0];
      vecVortexRadius.i32[2] = _mm_movehl_ps(v140, v140).u32[0];
      LODWORD(vecTemp.z) = vecVortexRadius.i32[2];
      *(_QWORD *)&vecTemp.x = vecVortexRadius.i64[0];
      VectorRotate(&vecTemp, &qRotate, (Vector *)&vecVortexRadius);
      v141 = _mm_mul_ps(vecVortexRadius, vecVortexRadius);
      v142 = *(float *)_mm_shuffle_epi32((__m128i)v141, 1).i32 + v141.f32[0];
      v143 = (__m128i)_mm_movehl_ps(v141, v141);
      *(float *)v143.i32 = *(float *)v143.i32 + v142;
      v144 = (__m128)_mm_shuffle_epi32(v143, 0);
      v145 = _mm_rsqrt_ps(v144);
      v146 = _mm_load_si128((const __m128i *)&flCurrentVortexRadius);
      v147 = _mm_add_ps(
               _mm_mul_ps(
                 _mm_and_ps(
                   _mm_mul_ps(
                     _mm_mul_ps(
                       _mm_mul_ps(_mm_sub_ps(v209, _mm_mul_ps(_mm_mul_ps(v145, v145), v144)), v145),
                       f4NewVortexRadius),
                     vecVortexRadius),
                   _mm_cmplt_ps(v210, v144)),
                 (__m128)_mm_shuffle_epi32(v146, 0)),
               f4PointOnLine);
      v148 = _mm_sub_ps(f4PointOnLine, f4EndPos);
      v149 = _mm_mul_ps(v148, v148);
      v150 = *(float *)_mm_shuffle_epi32((__m128i)v149, 1).i32 + v149.f32[0];
      v151 = (__m128i)_mm_movehl_ps(v149, v149);
      *(float *)v151.i32 = *(float *)v151.i32 + v150;
      v111 = v212;
      v152 = _mm_cmpeq_ps(v212, f4BeamRadiusSqr);
      v153 = _mm_add_ps(
               f4EndVelocity,
               _mm_mul_ps(
                 _mm_add_ps(
                   _mm_mul_ps(
                     _mm_max_ps(
                       v212,
                       _mm_min_ps(
                         v207,
                         _mm_div_ps(
                           _mm_sub_ps((__m128)_mm_shuffle_epi32(v151, 0), v212),
                           _mm_or_ps(_mm_andnot_ps(v152, v206), _mm_and_ps(v152, v207))))),
                     v205),
                   v212),
                 _mm_mul_ps(_mm_sub_ps(v147, f4EndPos), f4InvDeltaTime)));
      if ( *(float *)flBeamRadius.i32 == *(float *)((char *)&vClosest[166320].y.f32[3] + 3) )
      {
        v154.f32[0] = *(float *)v146.i32 - *(float *)flBeamRadius.i32;
        v155 = _mm_cmple_ss((__m128)0LL, v154);
        LODWORD(v156) = _mm_andnot_ps(v155, (__m128)flMinVortexRadiusScale).u32[0] | v155.i32[0] & LODWORD(v215);
      }
      else
      {
        v157 = (float)(*(float *)v146.i32 + v222.f32[0]) / v202.f32[0];
        v158 = 0.0;
        if ( v157 >= 0.0 )
          v158 = fminf(v215, v157);
        v156 = (float)(v158 * v189) + *(float *)flMinVortexRadiusScale.i32;
      }
      v34 = f4BeamAccelDT;
      v159 = flCurrentVortexSpeed.i32[0];
      v110 = a2;
      v160 = a2[2];
      *(float *)(v160 + v113 + 24) = v156;
      *(_DWORD *)(v160 + v113 + 28) = v159;
      *(_DWORD *)(v160 + v113 + 12) = v153.i32[0];
      *(_DWORD *)(v160 + v113 + 16) = _mm_shuffle_epi32((__m128i)v153, 1).u32[0];
      *(_DWORD *)(v160 + v113 + 20) = _mm_movehl_ps(v153, v153).u32[0];
      v161 = a2[2];
      *(_DWORD *)(v161 + v113) = v147.i32[0];
      *(_DWORD *)(v161 + v113 + 4) = _mm_shuffle_epi32((__m128i)v147, 1).u32[0];
      *(_DWORD *)(v161 + v113 + 8) = _mm_movehl_ps(v147, v147).u32[0];
      v113 += 40;
      --v214.i32[0];
    }
    while ( v214.i32[0] );
  }
}