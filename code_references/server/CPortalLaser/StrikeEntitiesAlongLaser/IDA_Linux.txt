bool __cdecl CPortalLaser::StrikeEntitiesAlongLaser(
        CPortalLaser *const this,
        const Vector *const vecStart,
        const Vector *const vecEnd,
        Vector *pVecOut)
{
  vec_t v4; // xmm2_4
  float z; // xmm1_4
  vec_t v6; // xmm1_4
  float v7; // xmm0_4
  float x; // xmm4_4
  float y; // xmm3_4
  float v10; // xmm6_4
  float v11; // xmm2_4
  bool v12; // al
  float v13; // xmm5_4
  float v14; // xmm1_4
  float v15; // xmm0_4
  int i; // edi
  CBaseEntity *v17; // esi
  int v18; // esi
  vec_t v19; // xmm2_4
  float v20; // xmm3_4
  float v21; // xmm0_4
  float v22; // xmm2_4
  int v23; // eax
  CBaseEntity *pVictim; // ebx
  _BYTE *v25; // eax
  bool v26; // bl
  float v28; // xmm0_4
  CBaseEntity *v29; // ebx
  const Vector *HullMaxs; // eax
  float v31; // xmm3_4
  int v32; // eax
  float v33; // [esp+20h] [ebp-8F8h]
  float v34; // [esp+30h] [ebp-8E8h]
  int bBestIsTurret; // [esp+38h] [ebp-8E0h]
  char bBestIsTurreta; // [esp+38h] [ebp-8E0h]
  CBaseEntity *list[512]; // [esp+40h] [ebp-8D8h] BYREF
  Ray_t ray; // [esp+840h] [ebp-D8h] BYREF
  CUtlSortVector<LaserVictimInfo_t,CLaserVictimLess,CUtlVector<LaserVictimInfo_t,CUtlMemory<LaserVictimInfo_t,int> > > vsrtVictims; // [esp+890h] [ebp-88h] BYREF
  Vector vecPlayerVelocity; // [esp+8ACh] [ebp-6Ch] BYREF
  Vector vecDirection; // [esp+8C0h] [ebp-58h] BYREF
  Vector vecNearestPoint; // [esp+8CCh] [ebp-4Ch] BYREF
  Vector vecLineToLaser; // [esp+8D8h] [ebp-40h] BYREF
  Vector vecBounce; // [esp+8E4h] [ebp-34h] BYREF
  Vector vecPushVelocity; // [esp+8F0h] [ebp-28h] BYREF
  float flFraction[7]; // [esp+8FCh] [ebp-1Ch] BYREF

  v4 = vecEnd->y - vecStart->y;
  z = vecEnd->z;
  vecDirection.x = vecEnd->x - vecStart->x;
  v6 = z - vecStart->z;
  vecDirection.y = v4;
  vecDirection.z = v6;
  v33 = (float)(fsqrt((float)((float)(vecDirection.x * vecDirection.x) + (float)(v4 * v4)) + (float)(v6 * v6))
              * 0.00390625)
      + 16.0;
  VectorNormalize(&vecDirection);
  ray.m_pWorldAxisTransform = 0;
  v7 = v33;
  x = vecStart->x;
  y = vecStart->y;
  v10 = vecEnd->y;
  v11 = vecStart->z;
  v12 = 1;
  v13 = vecEnd->z;
  ray.m_Delta.x = vecEnd->x - vecStart->x;
  ray.m_Delta.y = v10 - y;
  ray.m_Delta.z = v13 - v11;
  v14 = (float)(v7 + v7) * 0.5;
  v15 = (float)(v7 - v7) * 0.5;
  if ( (float)((float)((float)(ray.m_Delta.x * ray.m_Delta.x) + (float)(ray.m_Delta.y * ray.m_Delta.y))
             + (float)(ray.m_Delta.z * ray.m_Delta.z)) == 0.0 )
    v12 = 0;
  ray.m_Extents.x = v14;
  ray.m_Extents.y = v14;
  ray.m_Extents.z = v14;
  ray.m_IsSwept = v12;
  ray.m_Start.x = x + v15;
  ray.m_Start.y = y + v15;
  ray.m_Start.z = v11 + v15;
  ray.m_StartOffset.x = -v15;
  ray.m_IsRay = (float)((float)((float)(v14 * v14) + (float)(v14 * v14)) + (float)(v14 * v14)) < 0.000001;
  ray.m_StartOffset.y = -v15;
  ray.m_StartOffset.z = -v15;
  CFlaggedEntitiesEnum::CFlaggedEntitiesEnum((CFlaggedEntitiesEnum *const)&vecPlayerVelocity, list, 512, 33562752);
  bBestIsTurret = UTIL_EntitiesAlongRay(&ray, (CFlaggedEntitiesEnum *)&vecPlayerVelocity);
  memset(&vsrtVictims, 0, 25);
  if ( bBestIsTurret > 0 )
  {
    for ( i = 0; i != bBestIsTurret; ++i )
    {
      v17 = list[i];
      if ( (v17
         && (v17->m_iClassname.pszValue == "point_laser_target"
          || CBaseEntity::ClassMatchesComplex(v17, "point_laser_target")
          || v17->m_iClassname.pszValue == "npc_portal_turret_floor"
          || CBaseEntity::ClassMatchesComplex(v17, "npc_portal_turret_floor"))
         || (*((unsigned __int8 (__cdecl **)(CBaseEntity *))v17->_vptr_IHandleEntity + 86))(v17))
        && (*((unsigned __int8 (__cdecl **)(CBaseEntity *))v17->_vptr_IHandleEntity + 70))(v17) )
      {
        if ( (v17->m_iEFlags & 0x800) != 0 )
          CBaseEntity::CalcAbsolutePosition(v17);
        CalcClosestPointOnLineSegment(&v17->m_vecAbsOrigin, vecStart, vecEnd, &vecPlayerVelocity, flFraction);
        if ( (v17->m_iEFlags & 0x800) != 0 )
          CBaseEntity::CalcAbsolutePosition(v17);
        v28 = (float)((float)(vecPlayerVelocity.x - v17->m_vecAbsOrigin.x)
                    * (float)(vecPlayerVelocity.x - v17->m_vecAbsOrigin.x))
            + (float)((float)(vecPlayerVelocity.y - v17->m_vecAbsOrigin.y)
                    * (float)(vecPlayerVelocity.y - v17->m_vecAbsOrigin.y));
        if ( v28 <= 256.0 || this->m_bFromReflectedCube )
        {
          if ( !(*((unsigned __int8 (__cdecl **)(CBaseEntity *))v17->_vptr_IHandleEntity + 86))(v17) )
            goto LABEL_60;
          if ( sv_player_collide_with_laser.m_pParent->m_Value.m_nValue )
          {
            if ( CBaseEntity::GetGroundEntity(v17)
              || (v32 = (*((int (__cdecl **)(CBaseEntity *))v17->_vptr_IHandleEntity + 150))(v17),
                  (float)(*(float *)(v32 + 8) - vecPlayerVelocity.z) < 0.0) )
            {
              v29 = 0;
              if ( (*((unsigned __int8 (__cdecl **)(CBaseEntity *))v17->_vptr_IHandleEntity + 86))(v17) )
                v29 = v17;
              if ( (v29->m_iEFlags & 0x800) != 0 )
                CBaseEntity::CalcAbsolutePosition(v29);
              v34 = v29->m_vecAbsOrigin.z;
              HullMaxs = CPortal_Player::GetHullMaxs((const CPortal_Player *const)v29);
              if ( vecPlayerVelocity.z <= (float)(v34 + HullMaxs->z) && v28 <= 256.0 )
              {
LABEL_60:
                if ( flFraction[0] > 0.0 )
                {
                  LODWORD(vecPushVelocity.x) = v17;
                  vecPushVelocity.y = flFraction[0];
                  CUtlSortVector<LaserVictimInfo_t,CLaserVictimLess,CUtlVector<LaserVictimInfo_t,CUtlMemory<LaserVictimInfo_t,int>>>::InsertNoSort(
                    &vsrtVictims,
                    (const LaserVictimInfo_t *const)&vecPushVelocity);
                }
              }
            }
          }
        }
      }
    }
  }
  CUtlSortVector<LaserVictimInfo_t,CLaserVictimLess,CUtlVector<LaserVictimInfo_t,CUtlMemory<LaserVictimInfo_t,int>>>::RedoSort(
    &vsrtVictims,
    1);
  if ( vsrtVictims.m_Size > 0 )
  {
    bBestIsTurreta = 0;
    v18 = 0;
    while ( 1 )
    {
      pVictim = vsrtVictims.m_Memory.m_pMemory[v18].pVictim;
      if ( !pVictim )
        goto LABEL_19;
      if ( (pVictim->m_iClassname.pszValue == "point_laser_target"
         || CBaseEntity::ClassMatchesComplex(pVictim, "point_laser_target"))
        && !bBestIsTurreta )
      {
        CPortalLaser::DamageEntity(this, pVictim, 1.0);
        v25 = _dynamic_cast(
                pVictim,
                (const struct __class_type_info *)&`typeinfo for'CBaseEntity,
                (const struct __class_type_info *)&`typeinfo for'CPortalLaserTarget,
                0);
        if ( v25 && v25[933] )
        {
          v26 = 1;
          if ( pVecOut )
            *pVecOut = *(Vector *)(*(int (__cdecl **)(_BYTE *))(*(_DWORD *)v25 + 600))(v25);
          goto LABEL_41;
        }
        goto LABEL_33;
      }
      if ( pVictim->m_iClassname.pszValue == "npc_portal_turret_floor"
        || CBaseEntity::ClassMatchesComplex(pVictim, "npc_portal_turret_floor") )
      {
        ++v18;
        bBestIsTurreta = 1;
        if ( vsrtVictims.m_Size <= v18 )
          break;
      }
      else
      {
LABEL_19:
        if ( (*((unsigned __int8 (__cdecl **)(CBaseEntity *))pVictim->_vptr_IHandleEntity + 86))(pVictim)
          && pVictim->m_MoveType.m_Value != 8 )
        {
          if ( (pVictim->m_iEFlags & 0x1000) != 0 )
            CBaseEntity::CalcAbsoluteVelocity(pVictim);
          vecPlayerVelocity = pVictim->m_vecAbsVelocity;
          VectorNormalize(&vecPlayerVelocity);
          if ( (pVictim->m_iEFlags & 0x800) != 0 )
            CBaseEntity::CalcAbsolutePosition(pVictim);
          CalcClosestPointOnLineSegment(&pVictim->m_vecAbsOrigin, vecStart, vecEnd, &vecNearestPoint, 0);
          if ( (pVictim->m_iEFlags & 0x800) != 0 )
            CBaseEntity::CalcAbsolutePosition(pVictim);
          v19 = pVictim->m_vecAbsOrigin.x - vecNearestPoint.x;
          vecLineToLaser.y = pVictim->m_vecAbsOrigin.y - vecNearestPoint.y;
          vecLineToLaser.x = v19;
          vecLineToLaser.z = vecNearestPoint.z - vecNearestPoint.z;
          VectorNormalize(&vecLineToLaser);
          vecLineToLaser.z = 0.0;
          if ( (float)((float)((float)(vecPlayerVelocity.x * vecPlayerVelocity.x)
                             + (float)(vecPlayerVelocity.y * vecPlayerVelocity.y))
                     + (float)(vecPlayerVelocity.z * vecPlayerVelocity.z)) < 1.4210855e-14 )
          {
            vecBounce.z = (float)(0.0 * vecDirection.x) - (float)(0.0 * vecDirection.y);
            v20 = vecDirection.y - (float)(0.0 * vecDirection.z);
            v21 = vecBounce.z * 100.0;
            vecBounce.x = v20;
            v22 = (float)(0.0 * vecDirection.z) - vecDirection.x;
            vecBounce.y = v22;
LABEL_28:
            vecPushVelocity.z = v21;
            vecPushVelocity.x = v20 * 100.0;
            vecPushVelocity.y = 100.0 * v22;
            if ( (pVictim->m_fFlags.m_Value & 1) != 0 )
            {
              CBaseEntity::SetGroundEntity(pVictim, 0);
              CBaseEntity::SetGroundChangeTime(pVictim, gpGlobals->curtime + 0.5);
              vecPushVelocity.x = vecPushVelocity.x + vecPushVelocity.x;
              vecPushVelocity.y = vecPushVelocity.y + vecPushVelocity.y;
              vecPushVelocity.z = vecPushVelocity.z + vecPushVelocity.z;
            }
            CBaseEntity::SetAbsVelocity(pVictim, &vecPushVelocity);
            v23 = 1125515264;
            if ( this->m_bIsLethal.m_Value )
              v23 = 1203982336;
            CPortalLaser::DamageEntity(this, pVictim, *(float *)&v23);
            CBaseEntity::EmitSound(pVictim, "Flesh.LaserBurn", 0.0, 0);
            CBaseEntity::EmitSound(pVictim, "Player.PainSmall", 0.0, 0);
            goto LABEL_33;
          }
          v31 = (float)((float)(vecPlayerVelocity.x * vecLineToLaser.x) + (float)(vecPlayerVelocity.y * vecLineToLaser.y))
              + (float)(0.0 * vecPlayerVelocity.z);
          vecBounce.x = (float)((float)(vecLineToLaser.x * -2.0) * v31) + vecPlayerVelocity.x;
          vecBounce.y = (float)((float)(-2.0 * vecLineToLaser.y) * v31) + vecPlayerVelocity.y;
          vecBounce.z = (float)(v31 * -0.0) + vecPlayerVelocity.z;
          VectorNormalize(&vecBounce);
          v20 = vecBounce.x;
          vecBounce.z = 0.0;
          v22 = vecBounce.y;
          if ( (float)((float)((float)(vecLineToLaser.x * vecBounce.x) + (float)(vecLineToLaser.y * vecBounce.y))
                     + (float)(0.0 * vecLineToLaser.z)) >= 0.0 )
          {
            v21 = 0.0;
            goto LABEL_28;
          }
        }
LABEL_33:
        if ( vsrtVictims.m_Size <= ++v18 )
          break;
      }
    }
  }
  v26 = 0;
  if ( pVecOut )
    *pVecOut = *vecEnd;
LABEL_41:
  vsrtVictims.m_Size = 0;
  if ( vsrtVictims.m_Memory.m_nGrowSize >= 0 && vsrtVictims.m_Memory.m_pMemory )
    (*(void (__cdecl **)(_DWORD, LaserVictimInfo_t *))(*g_pMemAlloc + 8))(g_pMemAlloc, vsrtVictims.m_Memory.m_pMemory);
  return v26;
}