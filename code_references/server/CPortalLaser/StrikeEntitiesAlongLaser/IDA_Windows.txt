char __userpurge CPortalLaser::StrikeEntitiesAlongLaser@<al>(
        CPortalLaser *this@<ecx>,
        float a2@<ebp>,
        const Vector *vecStart,
        Vector *vecEnd,
        Vector *pVecOut)
{
  Vector *v5; // edi
  float v6; // xmm2_4
  float v7; // xmm1_4
  __int128 v8; // xmm0
  int v9; // eax
  float v10; // ecx
  CBaseEntity *v11; // esi
  int v12; // eax
  bool v13; // al
  CPortal_Player *v14; // edi
  const Vector *HullMaxs; // eax
  float v16; // eax
  float x; // edi
  int v18; // esi
  int (__thiscall *v19)(int); // eax
  const Vector *v20; // eax
  _BYTE *v21; // eax
  float v23; // edx
  int v24; // eax
  float v25; // xmm2_4
  float y; // xmm3_4
  float v27; // xmm0_4
  float v28; // xmm0_4
  bool v29; // zf
  float v30; // xmm0_4
  int (__thiscall *v31)(int); // edx
  const Vector *v32; // eax
  CBaseEntity *v33[3]; // [esp+1Ch] [ebp-96Ch] BYREF
  CBaseEntity *list[512]; // [esp+28h] [ebp-960h] BYREF
  Ray_t ray; // [esp+828h] [ebp-160h] BYREF
  __int64 v36; // [esp+8C8h] [ebp-C0h]
  int v37; // [esp+8D0h] [ebp-B8h]
  Vector vecPlayerPos; // [esp+8D4h] [ebp-B4h] BYREF
  Vector v39; // [esp+8E0h] [ebp-A8h] BYREF
  CFlaggedEntitiesEnum v40; // [esp+8ECh] [ebp-9Ch] BYREF
  int v41; // [esp+90Ch] [ebp-7Ch]
  float v42; // [esp+910h] [ebp-78h]
  float v43; // [esp+914h] [ebp-74h] BYREF
  int nCount; // [esp+918h] [ebp-70h] BYREF
  float flNearestDistSqr; // [esp+91Ch] [ebp-6Ch]
  float flFraction; // [esp+920h] [ebp-68h]
  Vector vecDirection; // [esp+924h] [ebp-64h] BYREF
  CUtlSortVector<LaserVictimInfo_t,CLaserVictimLess,CUtlVector<LaserVictimInfo_t,CUtlMemory<LaserVictimInfo_t,int> > > vsrtVictims; // [esp+930h] [ebp-58h] BYREF
  Vector vecLineToLaser; // [esp+94Ch] [ebp-3Ch] BYREF
  float v50; // [esp+958h] [ebp-30h]
  Vector vecPushVelocity; // [esp+95Ch] [ebp-2Ch] BYREF
  Vector vecPlayerVelocity; // [esp+968h] [ebp-20h] BYREF
  float v53; // [esp+974h] [ebp-14h]
  LaserVictimInfo_t victim; // [esp+978h] [ebp-10h] BYREF
  int i; // [esp+980h] [ebp-8h]
  int retaddr; // [esp+988h] [ebp+0h]

  victim.flFraction = a2;
  i = retaddr;
  LODWORD(vecLineToLaser.x) = this;
  v5 = vecEnd;
  v6 = vecEnd->z - vecStart->z;
  v7 = vecEnd->y - vecStart->y;
  *(float *)&nCount = vecEnd->x - vecStart->x;
  flFraction = v6;
  flNearestDistSqr = v7;
  v8 = 0i64;
  *(float *)&v8 = fsqrt((float)((float)(v6 * v6) + (float)(*(float *)&nCount * *(float *)&nCount)) + (float)(v7 * v7));
  *(_OWORD *)&v40.__vftable = v8;
  v53 = (float)(*(float *)&v8 * 0.00390625) + 16.0;
  VectorNormalize((Vector *)&nCount);
  LODWORD(vecLineToLaser.y) = LODWORD(v53) ^ _mask__NegFloat_;
  LODWORD(vecLineToLaser.z) = LODWORD(v53) ^ _mask__NegFloat_;
  LODWORD(v50) = LODWORD(v53) ^ _mask__NegFloat_;
  vecPushVelocity.x = v53;
  vecPushVelocity.y = v53;
  vecPushVelocity.z = v53;
  ray.m_Extents.y = 0.0;
  Ray_t::Init((Ray_t *)&list[509], vecStart, vecEnd, (Vector *)&vecLineToLaser.y, &vecPushVelocity);
  CFlaggedEntitiesEnum::CFlaggedEntitiesEnum(&v40, v33, 512, 33562752);
  v9 = UTIL_EntitiesAlongRay((const Ray_t *)&list[509], &v40);
  v10 = 0.0;
  v41 = v9;
  memset(&vecDirection, 0, sizeof(vecDirection));
  memset(&vsrtVictims, 0, 13);
  v53 = 0.0;
  if ( v9 > 0 )
  {
    do
    {
      v11 = v33[LODWORD(v10)];
      if ( (v11
         && (v11->m_iClassname.pszValue == "point_laser_target"
          || CBaseEntity::ClassMatchesComplex(v11, "point_laser_target")
          || v11->m_iClassname.pszValue == "npc_portal_turret_floor"
          || CBaseEntity::ClassMatchesComplex(v11, "npc_portal_turret_floor"))
         || v11->IsPlayer(v11))
        && v11->IsAlive(v11) )
      {
        if ( (v11->m_iEFlags & 0x800) != 0 )
          CBaseEntity::CalcAbsolutePosition(v11);
        CalcClosestPointOnLineSegment(&v11->m_vecAbsOrigin, vecStart, vecEnd, &vecPushVelocity, &v43);
        if ( (v11->m_iEFlags & 0x800) != 0 )
          CBaseEntity::CalcAbsolutePosition(v11);
        v42 = (float)((float)(vecPushVelocity.x - v11->m_vecAbsOrigin.x)
                    * (float)(vecPushVelocity.x - v11->m_vecAbsOrigin.x))
            + (float)((float)(vecPushVelocity.y - v11->m_vecAbsOrigin.y)
                    * (float)(vecPushVelocity.y - v11->m_vecAbsOrigin.y));
        if ( v42 <= 256.0 || *(_BYTE *)(LODWORD(vecLineToLaser.x) + 1885) )
        {
          if ( !v11->IsPlayer(v11) )
            goto LABEL_23;
          if ( sv_player_collide_with_laser.m_pParent->m_Value.m_nValue )
          {
            if ( CBaseEntity::GetGroundEntity(v11)
              || (v12 = (int)v11->WorldSpaceCenter(v11), (float)(*(float *)(v12 + 8) - vecPushVelocity.z) < 0.0) )
            {
              v13 = v11->IsPlayer(v11);
              v14 = v13 ? (CPortal_Player *)v11 : 0;
              if ( (v14->m_iEFlags & 0x800) != 0 )
                CBaseEntity::CalcAbsolutePosition(v13 ? v11 : 0);
              HullMaxs = CPortal_Player::GetHullMaxs(v14);
              if ( vecPushVelocity.z <= (float)(HullMaxs->z + v14->m_vecAbsOrigin.z) && v42 <= 256.0 )
              {
LABEL_23:
                if ( v43 > 0.0 )
                {
                  LODWORD(vecPlayerVelocity.y) = v11;
                  vecPlayerVelocity.z = v43;
                  CUtlSortVector<LaserVictimInfo_t,CLaserVictimLess,CUtlVector<LaserVictimInfo_t,CUtlMemory<LaserVictimInfo_t,int>>>::InsertNoSort(
                    (CUtlSortVector<LaserVictimInfo_t,CLaserVictimLess,CUtlVector<LaserVictimInfo_t,CUtlMemory<LaserVictimInfo_t,int> > > *)&vecDirection,
                    (const LaserVictimInfo_t *)&vecPlayerVelocity.y);
                }
              }
            }
          }
        }
      }
      LODWORD(v10) = LODWORD(v53) + 1;
      v53 = v10;
    }
    while ( SLODWORD(v10) < v41 );
    if ( (int)vsrtVictims.m_Memory.m_pMemory > 1 )
    {
      LODWORD(vecPlayerVelocity.y) = vsrtVictims.m_Memory.m_nGrowSize;
      LODWORD(vecPlayerVelocity.z) = (char *)&victim.pVictim + 3;
      qsort_s(
        (void *)LODWORD(vecDirection.x),
        (unsigned int)vsrtVictims.m_Memory.m_pMemory,
        8u,
        (int (__cdecl *)(void *, const void *, const void *))CUtlSortVector<LaserVictimInfo_t,CLaserVictimLess,CUtlVector<LaserVictimInfo_t,CUtlMemory<LaserVictimInfo_t,int>>>::CompareHelper,
        &vecPlayerVelocity.y);
    }
    v5 = vecEnd;
  }
  v16 = 0.0;
  HIBYTE(victim.pVictim) = 0;
  v53 = 0.0;
  if ( (int)vsrtVictims.m_Memory.m_pMemory > 0 )
  {
    while ( 1 )
    {
      x = vecDirection.x;
      v18 = *(_DWORD *)(LODWORD(vecDirection.x) + 8 * LODWORD(v16));
      if ( v18 )
      {
        if ( (*(const char **)(v18 + 96) == "point_laser_target"
           || CBaseEntity::ClassMatchesComplex((CBaseEntity *)v18, "point_laser_target"))
          && !HIBYTE(victim.pVictim) )
        {
          CTakeDamageInfo::CTakeDamageInfo(
            (CTakeDamageInfo *)(&ray.m_IsSwept + 7),
            (CBaseEntity *)LODWORD(vecLineToLaser.x),
            (CBaseEntity *)LODWORD(vecLineToLaser.x),
            gpGlobals->frametime,
            8,
            0);
          v19 = *(int (__thiscall **)(int))(*(_DWORD *)v18 + 596);
          vecPlayerPos.x = FLOAT_1_0;
          vecPlayerPos.y = 0.0;
          vecPlayerPos.z = 0.0;
          v20 = (const Vector *)v19(v18);
          CalculateMeleeDamageForce((CTakeDamageInfo *)(&ray.m_IsSwept + 7), &vecPlayerPos, v20, 1.0);
          CBaseEntity::TakeDamage((CBaseEntity *)v18, (const CTakeDamageInfo *)(&ray.m_IsSwept + 7));
          v21 = __RTDynamicCast(
                  (void *)v18,
                  0,
                  &CBaseEntity `RTTI Type Descriptor',
                  &CPortalLaserTarget `RTTI Type Descriptor',
                  0);
          if ( v21 && v21[909] )
          {
            if ( pVecOut )
              *pVecOut = *(Vector *)(*(int (__thiscall **)(_BYTE *))(*(_DWORD *)v21 + 596))(v21);
            if ( vecDirection.z >= 0.0 && x != 0.0 )
              _g_pMemAlloc->Free(_g_pMemAlloc, (void *)LODWORD(x));
            return 1;
          }
          goto LABEL_62;
        }
        if ( *(const char **)(v18 + 96) == "npc_portal_turret_floor"
          || CBaseEntity::ClassMatchesComplex((CBaseEntity *)v18, "npc_portal_turret_floor") )
        {
          HIBYTE(victim.pVictim) = 1;
          goto LABEL_62;
        }
      }
      if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v18 + 340))(v18) && *(_BYTE *)(v18 + 218) != 8 )
      {
        if ( (*(_DWORD *)(v18 + 200) & 0x1000) != 0 )
          CBaseEntity::CalcAbsoluteVelocity((CBaseEntity *)v18);
        v23 = *(float *)(v18 + 372);
        *(_QWORD *)&vecPushVelocity.x = *(_QWORD *)(v18 + 364);
        vecPushVelocity.z = v23;
        VectorNormalize(&vecPushVelocity);
        if ( (*(_DWORD *)(v18 + 200) & 0x800) != 0 )
          CBaseEntity::CalcAbsolutePosition((CBaseEntity *)v18);
        CalcClosestPointOnLineSegment((const Vector *)(v18 + 460), vecStart, vecEnd, (Vector *)&v40.m_listMax, 0);
        if ( (*(_DWORD *)(v18 + 200) & 0x800) != 0 )
          CBaseEntity::CalcAbsolutePosition((CBaseEntity *)v18);
        v24 = *(_DWORD *)(v18 + 468);
        v36 = *(_QWORD *)(v18 + 460);
        *(float *)&vsrtVictims.m_pElements = *(float *)&v36 - *(float *)&v40.m_listMax;
        *(float *)&vsrtVictims.m_pLessContext = *((float *)&v36 + 1) - *(float *)&v40.m_flagMask;
        v37 = v24;
        *(_DWORD *)&vsrtVictims.m_bNeedsSort = 0;
        VectorNormalize((Vector *)&vsrtVictims.m_pElements);
        *(_DWORD *)&vsrtVictims.m_bNeedsSort = 0;
        if ( (float)((float)((float)(vecPushVelocity.x * vecPushVelocity.x)
                           + (float)(vecPushVelocity.y * vecPushVelocity.y))
                   + (float)(vecPushVelocity.z * vecPushVelocity.z)) < 1.4210855e-14 )
        {
          v25 = flNearestDistSqr - (float)(flFraction * 0.0);
          y = (float)(flFraction * 0.0) - *(float *)&nCount;
          v27 = (float)(*(float *)&nCount * 0.0) - (float)(flNearestDistSqr * 0.0);
          vecPlayerVelocity.x = v25;
          vecPlayerVelocity.y = y;
          vecPlayerVelocity.z = v27;
LABEL_56:
          v29 = (*(_BYTE *)(v18 + 204) & 1) == 0;
          vecLineToLaser.y = v25 * 100.0;
          vecLineToLaser.z = y * 100.0;
          v50 = v27 * 100.0;
          if ( !v29 )
          {
            CBaseEntity::SetGroundEntity((CBaseEntity *)v18, 0);
            CBaseEntity::SetGroundChangeTime((CBaseEntity *)v18, gpGlobals->curtime + 0.5);
            vecLineToLaser.y = vecLineToLaser.y * 2.0;
            vecLineToLaser.z = vecLineToLaser.z * 2.0;
            v50 = v50 * 2.0;
          }
          CBaseEntity::SetAbsVelocity((CBaseEntity *)v18, (Vector *)&vecLineToLaser.y);
          if ( *(_BYTE *)(LODWORD(vecLineToLaser.x) + 1921) )
            v30 = FLOAT_100000_0;
          else
            v30 = FLOAT_150_0;
          CTakeDamageInfo::CTakeDamageInfo(
            (CTakeDamageInfo *)(&ray.m_IsSwept + 7),
            (CBaseEntity *)LODWORD(vecLineToLaser.x),
            (CBaseEntity *)LODWORD(vecLineToLaser.x),
            gpGlobals->frametime * v30,
            8,
            0);
          v31 = *(int (__thiscall **)(int))(*(_DWORD *)v18 + 596);
          v39.x = FLOAT_1_0;
          v39.y = 0.0;
          v39.z = 0.0;
          v32 = (const Vector *)v31(v18);
          CalculateMeleeDamageForce((CTakeDamageInfo *)(&ray.m_IsSwept + 7), &v39, v32, 1.0);
          CBaseEntity::TakeDamage((CBaseEntity *)v18, (const CTakeDamageInfo *)(&ray.m_IsSwept + 7));
          CBaseEntity::EmitSound((CBaseEntity *)v18, "Flesh.LaserBurn", 0.0, 0);
          CBaseEntity::EmitSound((CBaseEntity *)v18, "Player.PainSmall", 0.0, 0);
          goto LABEL_62;
        }
        v28 = (float)((float)(*(float *)&vsrtVictims.m_pElements * vecPushVelocity.x)
                    + (float)(vecPushVelocity.y * *(float *)&vsrtVictims.m_pLessContext))
            + (float)(vecPushVelocity.z * 0.0);
        vecPlayerVelocity.x = (float)((float)(*(float *)&vsrtVictims.m_pElements * -2.0) * v28) + vecPushVelocity.x;
        vecPlayerVelocity.y = (float)((float)(*(float *)&vsrtVictims.m_pLessContext * -2.0) * v28) + vecPushVelocity.y;
        vecPlayerVelocity.z = (float)(v28 * -0.0) + vecPushVelocity.z;
        VectorNormalize(&vecPlayerVelocity);
        y = vecPlayerVelocity.y;
        v25 = vecPlayerVelocity.x;
        v27 = 0.0;
        vecPlayerVelocity.z = 0.0;
        if ( (float)((float)((float)(*(float *)&vsrtVictims.m_pElements * vecPlayerVelocity.x)
                           + (float)(vecPlayerVelocity.y * *(float *)&vsrtVictims.m_pLessContext))
                   + (float)(*(float *)&vsrtVictims.m_bNeedsSort * 0.0)) >= 0.0 )
          goto LABEL_56;
      }
LABEL_62:
      LODWORD(v16) = LODWORD(v53) + 1;
      v53 = v16;
      if ( SLODWORD(v16) >= (int)vsrtVictims.m_Memory.m_pMemory )
      {
        v5 = vecEnd;
        break;
      }
    }
  }
  if ( pVecOut )
    *pVecOut = *v5;
  if ( vecDirection.z >= 0.0 && LODWORD(vecDirection.x) )
    _g_pMemAlloc->Free(_g_pMemAlloc, (void *)LODWORD(vecDirection.x));
  return 0;
}