CBaseEntity *__cdecl CPortalLaser::GetEntitiesAlongLaser(
        CPortalLaser *const this,
        const Vector *const vecStart,
        const Vector *const vecEnd,
        Vector *pVecOut,
        CPortalLaser::PortalLaserInfoList_t *const infoList,
        bool bIsFirstTrace)
{
  float x; // xmm0_4
  float y; // xmm2_4
  float z; // xmm3_4
  float v9; // xmm1_4
  float v10; // xmm5_4
  float v11; // xmm4_4
  float m_fValue; // xmm1_4
  int m_nValue; // eax
  bool v14; // al
  float v15; // xmm1_4
  float v16; // xmm7_4
  float v17; // xmm6_4
  float v18; // xmm5_4
  float v19; // xmm0_4
  float v20; // xmm7_4
  int v21; // eax
  int v22; // ebx
  CBaseEntity *v23; // eax
  bool v24; // zf
  int v25; // esi
  bool v26; // al
  CBaseEntity *v27; // ebx
  _BYTE *v28; // eax
  Vector *v29; // eax
  const Vector *v31; // eax
  float v32; // [esp+4Ch] [ebp-8ECh]
  float v33; // [esp+50h] [ebp-8E8h]
  bool bBlockTarget; // [esp+57h] [ebp-8E1h]
  CPortalLaser::PortalLaserInfo_t *info; // [esp+58h] [ebp-8E0h]
  int nCount; // [esp+5Ch] [ebp-8DCh]
  CBaseEntity *list[512]; // [esp+60h] [ebp-8D8h] BYREF
  Ray_t ray; // [esp+860h] [ebp-D8h] BYREF
  CUtlSortVector<LaserVictimInfo_t,CLaserVictimLess,CUtlVector<LaserVictimInfo_t,CUtlMemory<LaserVictimInfo_t,int> > > vsrtVictims; // [esp+8BCh] [ebp-7Ch] BYREF
  Vector vecNearest; // [esp+8D8h] [ebp-60h] BYREF
  Vector vecDirection; // [esp+8ECh] [ebp-4Ch] BYREF
  Vector vecMins; // [esp+8F8h] [ebp-40h] BYREF
  Vector vecMaxs; // [esp+904h] [ebp-34h] BYREF
  LaserVictimInfo_t victim; // [esp+910h] [ebp-28h] BYREF
  CBaseEntity *pEntity; // [esp+918h] [ebp-20h] BYREF
  float flFraction[7]; // [esp+91Ch] [ebp-1Ch] BYREF

  CUtlVector<CPortalLaser::PortalLaserInfo_t,CUtlMemory<CPortalLaser::PortalLaserInfo_t,int>>::InsertBefore(
    infoList,
    infoList->m_Size);
  info = &infoList->m_Memory.m_pMemory[infoList->m_Size - 1];
  info->vecStart = *vecStart;
  info->vecEnd = *vecEnd;
  x = vecEnd->x;
  y = vecEnd->y;
  z = vecEnd->z;
  v9 = vecEnd->x - vecStart->x;
  v10 = y - vecStart->y;
  v11 = z - vecStart->z;
  vecDirection.x = v9;
  vecDirection.y = v10;
  vecDirection.z = v11;
  if ( bIsFirstTrace )
    m_fValue = (float)(fsqrt((float)((float)(v9 * v9) + (float)(v10 * v10)) + (float)(v11 * v11)) * 0.00390625) + 16.0;
  else
    m_fValue = sv_laser_tight_box.m_pParent->m_Value.m_fValue;
  vecMaxs.x = m_fValue;
  vecMins.x = -m_fValue;
  vecMins.y = -m_fValue;
  m_nValue = sv_debug_laser.m_pParent->m_Value.m_nValue;
  vecMins.z = -m_fValue;
  vecMaxs.y = m_fValue;
  vecMaxs.z = m_fValue;
  if ( m_nValue )
  {
    VectorAngles(&vecDirection, (QAngle *const)&vecNearest);
    if ( bIsFirstTrace )
      NDebugOverlay::SweptBox(vecStart, vecEnd, &vecMins, &vecMaxs, (const QAngle *const)&vecNearest, 255, 0, 0, 0, 0.1);
    else
      NDebugOverlay::SweptBox(vecStart, vecEnd, &vecMins, &vecMaxs, (const QAngle *const)&vecNearest, 0, 255, 0, 0, 0.1);
    x = vecEnd->x;
    y = vecEnd->y;
    z = vecEnd->z;
  }
  v14 = 1;
  ray.m_pWorldAxisTransform = 0;
  v33 = vecStart->x;
  v32 = vecStart->y;
  v15 = vecStart->z;
  ray.m_Delta.x = x - vecStart->x;
  ray.m_Delta.y = y - v32;
  ray.m_Delta.z = z - v15;
  v16 = (float)(vecMaxs.x + vecMins.x) * 0.5;
  v17 = (float)(vecMaxs.y + vecMins.y) * 0.5;
  ray.m_Extents.y = (float)(vecMaxs.y - vecMins.y) * 0.5;
  v18 = (float)(vecMaxs.z + vecMins.z) * 0.5;
  ray.m_Extents.z = (float)(vecMaxs.z - vecMins.z) * 0.5;
  ray.m_Extents.x = (float)(vecMaxs.x - vecMins.x) * 0.5;
  v19 = v33 + v16;
  v20 = -v16;
  if ( (float)((float)((float)(ray.m_Delta.x * ray.m_Delta.x) + (float)(ray.m_Delta.y * ray.m_Delta.y))
             + (float)(ray.m_Delta.z * ray.m_Delta.z)) == 0.0 )
    v14 = 0;
  ray.m_Start.x = v19;
  ray.m_IsSwept = v14;
  ray.m_Start.y = v32 + v17;
  ray.m_IsRay = (float)((float)((float)(ray.m_Extents.x * ray.m_Extents.x) + (float)(ray.m_Extents.y * ray.m_Extents.y))
                      + (float)(ray.m_Extents.z * ray.m_Extents.z)) < 0.000001;
  ray.m_Start.z = v15 + v18;
  ray.m_StartOffset.x = v20;
  ray.m_StartOffset.y = -v17;
  ray.m_StartOffset.z = -v18;
  CFlaggedEntitiesEnum::CFlaggedEntitiesEnum((CFlaggedEntitiesEnum *const)&vecNearest, list, 512, 33562752);
  v21 = UTIL_EntitiesAlongRay(&ray, (CFlaggedEntitiesEnum *)&vecNearest);
  pEntity = 0;
  nCount = v21;
  memset(&vsrtVictims, 0, 25);
  if ( v21 > 0 )
  {
    v22 = 0;
    while ( 1 )
    {
      pEntity = list[v22];
      v23 = pEntity;
      if ( pEntity )
      {
        if ( pEntity->m_iClassname.pszValue == "point_laser_target" )
          goto LABEL_16;
        v24 = !CBaseEntity::ClassMatchesComplex(pEntity, "point_laser_target");
        v23 = pEntity;
        if ( !v24 )
          goto LABEL_16;
        if ( pEntity )
        {
          if ( pEntity->m_iClassname.pszValue == "npc_portal_turret_floor" )
            goto LABEL_16;
          v24 = !CBaseEntity::ClassMatchesComplex(pEntity, "npc_portal_turret_floor");
          v23 = pEntity;
          if ( !v24 )
            goto LABEL_16;
        }
      }
      if ( (*((unsigned __int8 (__cdecl **)(CBaseEntity *))v23->_vptr_IHandleEntity + 86))(v23) )
        break;
LABEL_17:
      if ( ++v22 == nCount )
        goto LABEL_18;
    }
    v23 = pEntity;
LABEL_16:
    if ( (*((unsigned __int8 (__cdecl **)(CBaseEntity *))v23->_vptr_IHandleEntity + 70))(v23) )
    {
      v31 = (const Vector *)(*((int (__cdecl **)(CBaseEntity *))pEntity->_vptr_IHandleEntity + 150))(pEntity);
      CalcClosestPointOnLineSegment(v31, vecStart, vecEnd, &vecNearest, flFraction);
      if ( (!(*((unsigned __int8 (__cdecl **)(CBaseEntity *))pEntity->_vptr_IHandleEntity + 86))(pEntity)
         || sv_player_collide_with_laser.m_pParent->m_Value.m_nValue)
        && flFraction[0] > 0.0 )
      {
        victim.flFraction = flFraction[0];
        victim.pVictim = pEntity;
        CUtlSortVector<LaserVictimInfo_t,CLaserVictimLess,CUtlVector<LaserVictimInfo_t,CUtlMemory<LaserVictimInfo_t,int>>>::InsertNoSort(
          &vsrtVictims,
          &victim);
      }
    }
    goto LABEL_17;
  }
LABEL_18:
  CUtlSortVector<LaserVictimInfo_t,CLaserVictimLess,CUtlVector<LaserVictimInfo_t,CUtlMemory<LaserVictimInfo_t,int>>>::RedoSort(
    &vsrtVictims,
    1);
  if ( vsrtVictims.m_Size > 0 )
  {
    v25 = 0;
    bBlockTarget = 0;
    while ( 1 )
    {
      pEntity = vsrtVictims.m_Memory.m_pMemory[v25].pVictim;
      CUtlVector<CBaseEntity *,CUtlMemory<CBaseEntity *,int>>::InsertBefore(
        &info->sortedEntList,
        info->sortedEntList.m_Size,
        &pEntity);
      v27 = pEntity;
      if ( !pEntity )
        goto LABEL_24;
      if ( (pEntity->m_iClassname.pszValue == "point_laser_target"
         || (v26 = CBaseEntity::ClassMatchesComplex(pEntity, "point_laser_target"), v27 = pEntity, v26))
        && !bBlockTarget )
      {
        if ( v27 )
        {
          v28 = _dynamic_cast(
                  v27,
                  (const struct __class_type_info *)&`typeinfo for'CBaseEntity,
                  (const struct __class_type_info *)&`typeinfo for'CPortalLaserTarget,
                  0);
          if ( v28 )
          {
            if ( v28[933] )
            {
              if ( pVecOut )
              {
                v29 = (Vector *)(*(int (__cdecl **)(_BYTE *))(*(_DWORD *)v28 + 600))(v28);
                v27 = pEntity;
                *pVecOut = *v29;
              }
              goto LABEL_33;
            }
          }
        }
LABEL_24:
        if ( vsrtVictims.m_Size <= ++v25 )
          break;
      }
      else
      {
        if ( !v27
          || v27->m_iClassname.pszValue != "npc_portal_turret_floor"
          && !CBaseEntity::ClassMatchesComplex(v27, "npc_portal_turret_floor") )
        {
          goto LABEL_24;
        }
        ++v25;
        bBlockTarget = 1;
        if ( vsrtVictims.m_Size <= v25 )
          break;
      }
    }
  }
  v27 = 0;
  if ( pVecOut )
    *pVecOut = *vecEnd;
LABEL_33:
  vsrtVictims.m_Size = 0;
  if ( vsrtVictims.m_Memory.m_nGrowSize >= 0 && vsrtVictims.m_Memory.m_pMemory )
    (*(void (__cdecl **)(_DWORD, LaserVictimInfo_t *))(*g_pMemAlloc + 8))(g_pMemAlloc, vsrtVictims.m_Memory.m_pMemory);
  return v27;
}